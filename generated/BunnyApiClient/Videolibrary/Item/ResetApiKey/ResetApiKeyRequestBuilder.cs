// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Cli.Commons.Extensions;
using Microsoft.Kiota.Cli.Commons.IO;
using Microsoft.Kiota.Cli.Commons;
using System.Collections.Generic;
using System.CommandLine;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace BunnyApiClient.Videolibrary.Item.ResetApiKey
{
    /// <summary>
    /// Builds and executes requests for operations under \videolibrary\{id}\resetApiKey
    /// </summary>
    public class ResetApiKeyRequestBuilder : BaseCliRequestBuilder
    {
        /// <summary>
        /// [ResetPasswordPath API Docs](https://docs.bunny.net/reference/videolibrarypublic_resetpassword2)
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPostCommand()
        {
            var command = new Command("post");
            command.Description = "[ResetPasswordPath API Docs](https://docs.bunny.net/reference/videolibrarypublic_resetpassword2)";
            var idOption = new Option<long?>("--id", description: "The ID of the Video Library that should have the password reset") {
            };
            idOption.IsRequired = true;
            command.AddOption(idOption);
            command.SetHandler(async (invocationContext) => {
                var id = invocationContext.ParseResult.GetValueForOption(idOption);
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToPostRequestInformation(q => {
                });
                if (id is not null) requestInfo.PathParameters.Add("id", id);
                await reqAdapter.SendNoContentAsync(requestInfo, errorMapping: default, cancellationToken: cancellationToken);
                Console.WriteLine("Success");
            });
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="BunnyApiClient.Videolibrary.Item.ResetApiKey.ResetApiKeyRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        public ResetApiKeyRequestBuilder(Dictionary<string, object> pathParameters) : base("{+baseurl}/videolibrary/{id}/resetApiKey", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="BunnyApiClient.Videolibrary.Item.ResetApiKey.ResetApiKeyRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public ResetApiKeyRequestBuilder(string rawUrl) : base("{+baseurl}/videolibrary/{id}/resetApiKey", rawUrl)
        {
        }
        /// <summary>
        /// [ResetPasswordPath API Docs](https://docs.bunny.net/reference/videolibrarypublic_resetpassword2)
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
    }
}
