// <auto-generated/>
using BunnyApiClient.Models.StreamVideoLibrary;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace BunnyApiClient.Videolibrary.Item
{
    /// <summary>
    /// The template for adding optional properties.
    /// </summary>
    public class VideolibraryPostRequestBody : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Determines direct play URLs are enabled for the library</summary>
        public bool? AllowDirectPlay { get; set; }
        /// <summary>Determines if the Early-Play feature is enabled</summary>
        public bool? AllowEarlyPlay { get; set; }
        /// <summary>The list of allowed referrer domains allowed to access the library</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AllowedReferrers { get; private set; }
#nullable restore
#else
        public List<string> AllowedReferrers { get; private set; }
#endif
        /// <summary>The API access key for the library. Only added when the includeAccessKey parameter is set.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApiAccessKey { get; private set; }
#nullable restore
#else
        public string ApiAccessKey { get; private set; }
#endif
        /// <summary>The API key used for authenticating with the video library</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApiKey { get; private set; }
#nullable restore
#else
        public string ApiKey { get; private set; }
#endif
        /// <summary>The AppleFairPlayDrm property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::BunnyApiClient.Videolibrary.Item.VideolibraryPostRequestBody_AppleFairPlayDrm? AppleFairPlayDrm { get; private set; }
#nullable restore
#else
        public global::BunnyApiClient.Videolibrary.Item.VideolibraryPostRequestBody_AppleFairPlayDrm AppleFairPlayDrm { get; private set; }
#endif
        /// <summary>The bitrate used for encoding 1080p videos</summary>
        public int? Bitrate1080p { get; set; }
        /// <summary>The bitrate used for encoding 1440p videos</summary>
        public int? Bitrate1440p { get; set; }
        /// <summary>The bitrate used for encoding 2160p videos</summary>
        public int? Bitrate2160p { get; set; }
        /// <summary>The bitrate used for encoding 240p videos</summary>
        public int? Bitrate240p { get; set; }
        /// <summary>The bitrate used for encoding 360p videos</summary>
        public int? Bitrate360p { get; set; }
        /// <summary>The bitrate used for encoding 480p videos</summary>
        public int? Bitrate480p { get; set; }
        /// <summary>The bitrate used for encoding 720p videos</summary>
        public int? Bitrate720p { get; set; }
        /// <summary>The list of blocked referrer domains blocked from accessing the library</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? BlockedReferrers { get; private set; }
#nullable restore
#else
        public List<string> BlockedReferrers { get; private set; }
#endif
        /// <summary>Determines if the requests without a referrer are blocked</summary>
        public bool? BlockNoneReferrer { get; set; }
        /// <summary>The captions display background color</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CaptionsBackground { get; set; }
#nullable restore
#else
        public string CaptionsBackground { get; set; }
#endif
        /// <summary>The captions display font color</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CaptionsFontColor { get; set; }
#nullable restore
#else
        public string CaptionsFontColor { get; set; }
#endif
        /// <summary>The captions display font size</summary>
        public int? CaptionsFontSize { get; set; }
        /// <summary>The list of controls on the video player.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Controls { get; set; }
#nullable restore
#else
        public string Controls { get; set; }
#endif
        /// <summary>The custom HTMl that is added into the head of the HTML player.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomHTML { get; set; }
#nullable restore
#else
        public string CustomHTML { get; set; }
#endif
        /// <summary>The date when the video library was created</summary>
        public DateTimeOffset? DateCreated { get; private set; }
        /// <summary>The DrmVersion property</summary>
        public long? DrmVersion { get; private set; }
        /// <summary>Determines if content tagging should be enabled for this library.</summary>
        public bool? EnableContentTagging { get; set; }
        /// <summary>The comma separated list of enabled resolutions</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EnabledResolutions { get; set; }
#nullable restore
#else
        public string EnabledResolutions { get; set; }
#endif
        /// <summary>Determines if the MediaCage basic DRM is enabled</summary>
        public bool? EnableDRM { get; set; }
        /// <summary>Determines if the MP4 fallback feature is enabled</summary>
        public bool? EnableMP4Fallback { get; set; }
        /// <summary>Determines if the automatic audio transcribing is currently enabled for this zone.</summary>
        public bool? EnableTranscribing { get; set; }
        /// <summary>Determines if automatic transcribing description generation is currently enabled.</summary>
        public bool? EnableTranscribingDescriptionGeneration { get; set; }
        /// <summary>Determines if automatic transcribing title generation is currently enabled.</summary>
        public bool? EnableTranscribingTitleGeneration { get; set; }
        /// <summary>The captions font family.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FontFamily { get; set; }
#nullable restore
#else
        public string FontFamily { get; set; }
#endif
        /// <summary>The GoogleWidevineDrm property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::BunnyApiClient.Videolibrary.Item.VideolibraryPostRequestBody_GoogleWidevineDrm? GoogleWidevineDrm { get; private set; }
#nullable restore
#else
        public global::BunnyApiClient.Videolibrary.Item.VideolibraryPostRequestBody_GoogleWidevineDrm GoogleWidevineDrm { get; private set; }
#endif
        /// <summary>Determines if the video library has a watermark configured</summary>
        public bool? HasWatermark { get; private set; }
        /// <summary>The Id property</summary>
        public long? Id { get; private set; }
        /// <summary>Determines if the original video files should be stored after encoding</summary>
        public bool? KeepOriginalFiles { get; set; }
        /// <summary>The name of the Video Library.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The key color of the player.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlayerKeyColor { get; set; }
#nullable restore
#else
        public string PlayerKeyColor { get; set; }
#endif
        /// <summary>Determines if the player token authentication is enabled</summary>
        public bool? PlayerTokenAuthenticationEnabled { get; set; }
        /// <summary>The ID of the connected underlying pull zone</summary>
        public long? PullZoneId { get; private set; }
        /// <summary>The PullZoneType property</summary>
        public double? PullZoneType { get; private set; }
        /// <summary>The read-only API key used for authenticating with the video library</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReadOnlyApiKey { get; private set; }
#nullable restore
#else
        public string ReadOnlyApiKey { get; private set; }
#endif
        /// <summary>The list of languages that the captions will be automatically transcribed to.</summary>
        public bool? RememberPlayerPosition { get; private set; }
        /// <summary>The geo-replication regions of the underlying storage zone</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::BunnyApiClient.Models.StreamVideoLibrary.ReplicationRegions?>? ReplicationRegions { get; private set; }
#nullable restore
#else
        public List<global::BunnyApiClient.Models.StreamVideoLibrary.ReplicationRegions?> ReplicationRegions { get; private set; }
#endif
        /// <summary>Determines if the video watch heatmap should be displayed in the player.</summary>
        public bool? ShowHeatmap { get; set; }
        /// <summary>The total amount of storage used by the library</summary>
        public long? StorageUsage { get; private set; }
        /// <summary>The ID of the connected underlying storage zone</summary>
        public long? StorageZoneId { get; private set; }
        /// <summary>The amount of traffic usage this month</summary>
        public long? TrafficUsage { get; private set; }
        /// <summary>The TranscribingCaptionLanguages property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? TranscribingCaptionLanguages { get; set; }
#nullable restore
#else
        public List<string> TranscribingCaptionLanguages { get; set; }
#endif
        /// <summary>The UI language of the player</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UILanguage { get; set; }
#nullable restore
#else
        public string UILanguage { get; set; }
#endif
        /// <summary>The URL of the VAST tag endpoint for advertising configuration</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VastTagUrl { get; set; }
#nullable restore
#else
        public string VastTagUrl { get; set; }
#endif
        /// <summary>The vi.ai publisher id for advertising configuration</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ViAiPublisherId { get; set; }
#nullable restore
#else
        public string ViAiPublisherId { get; set; }
#endif
        /// <summary>The number of videos in the video library</summary>
        public long? VideoCount { get; private set; }
        /// <summary>The height of the watermark (in %)</summary>
        public int? WatermarkHeight { get; set; }
        /// <summary>The left offset of the watermark position (in %)</summary>
        public int? WatermarkPositionLeft { get; set; }
        /// <summary>The top offset of the watermark position (in %)</summary>
        public int? WatermarkPositionTop { get; set; }
        /// <summary>The WatermarkVersion property</summary>
        public long? WatermarkVersion { get; private set; }
        /// <summary>The width of the watermark (in %)</summary>
        public int? WatermarkWidth { get; set; }
        /// <summary>The webhook URL of the video library</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebhookUrl { get; set; }
#nullable restore
#else
        public string WebhookUrl { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="BunnyApiClient.Videolibrary.Item.VideolibraryPostRequestBody"/> and sets the default values.
        /// </summary>
        public VideolibraryPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="BunnyApiClient.Videolibrary.Item.VideolibraryPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::BunnyApiClient.Videolibrary.Item.VideolibraryPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::BunnyApiClient.Videolibrary.Item.VideolibraryPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "AllowDirectPlay", n => { AllowDirectPlay = n.GetBoolValue(); } },
                { "AllowEarlyPlay", n => { AllowEarlyPlay = n.GetBoolValue(); } },
                { "AllowedReferrers", n => { AllowedReferrers = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "ApiAccessKey", n => { ApiAccessKey = n.GetStringValue(); } },
                { "ApiKey", n => { ApiKey = n.GetStringValue(); } },
                { "AppleFairPlayDrm", n => { AppleFairPlayDrm = n.GetObjectValue<global::BunnyApiClient.Videolibrary.Item.VideolibraryPostRequestBody_AppleFairPlayDrm>(global::BunnyApiClient.Videolibrary.Item.VideolibraryPostRequestBody_AppleFairPlayDrm.CreateFromDiscriminatorValue); } },
                { "Bitrate1080p", n => { Bitrate1080p = n.GetIntValue(); } },
                { "Bitrate1440p", n => { Bitrate1440p = n.GetIntValue(); } },
                { "Bitrate2160p", n => { Bitrate2160p = n.GetIntValue(); } },
                { "Bitrate240p", n => { Bitrate240p = n.GetIntValue(); } },
                { "Bitrate360p", n => { Bitrate360p = n.GetIntValue(); } },
                { "Bitrate480p", n => { Bitrate480p = n.GetIntValue(); } },
                { "Bitrate720p", n => { Bitrate720p = n.GetIntValue(); } },
                { "BlockNoneReferrer", n => { BlockNoneReferrer = n.GetBoolValue(); } },
                { "BlockedReferrers", n => { BlockedReferrers = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "CaptionsBackground", n => { CaptionsBackground = n.GetStringValue(); } },
                { "CaptionsFontColor", n => { CaptionsFontColor = n.GetStringValue(); } },
                { "CaptionsFontSize", n => { CaptionsFontSize = n.GetIntValue(); } },
                { "Controls", n => { Controls = n.GetStringValue(); } },
                { "CustomHTML", n => { CustomHTML = n.GetStringValue(); } },
                { "DateCreated", n => { DateCreated = n.GetDateTimeOffsetValue(); } },
                { "DrmVersion", n => { DrmVersion = n.GetLongValue(); } },
                { "EnableContentTagging", n => { EnableContentTagging = n.GetBoolValue(); } },
                { "EnableDRM", n => { EnableDRM = n.GetBoolValue(); } },
                { "EnableMP4Fallback", n => { EnableMP4Fallback = n.GetBoolValue(); } },
                { "EnableTranscribing", n => { EnableTranscribing = n.GetBoolValue(); } },
                { "EnableTranscribingDescriptionGeneration", n => { EnableTranscribingDescriptionGeneration = n.GetBoolValue(); } },
                { "EnableTranscribingTitleGeneration", n => { EnableTranscribingTitleGeneration = n.GetBoolValue(); } },
                { "EnabledResolutions", n => { EnabledResolutions = n.GetStringValue(); } },
                { "FontFamily", n => { FontFamily = n.GetStringValue(); } },
                { "GoogleWidevineDrm", n => { GoogleWidevineDrm = n.GetObjectValue<global::BunnyApiClient.Videolibrary.Item.VideolibraryPostRequestBody_GoogleWidevineDrm>(global::BunnyApiClient.Videolibrary.Item.VideolibraryPostRequestBody_GoogleWidevineDrm.CreateFromDiscriminatorValue); } },
                { "HasWatermark", n => { HasWatermark = n.GetBoolValue(); } },
                { "Id", n => { Id = n.GetLongValue(); } },
                { "KeepOriginalFiles", n => { KeepOriginalFiles = n.GetBoolValue(); } },
                { "Name", n => { Name = n.GetStringValue(); } },
                { "PlayerKeyColor", n => { PlayerKeyColor = n.GetStringValue(); } },
                { "PlayerTokenAuthenticationEnabled", n => { PlayerTokenAuthenticationEnabled = n.GetBoolValue(); } },
                { "PullZoneId", n => { PullZoneId = n.GetLongValue(); } },
                { "PullZoneType", n => { PullZoneType = n.GetDoubleValue(); } },
                { "ReadOnlyApiKey", n => { ReadOnlyApiKey = n.GetStringValue(); } },
                { "RememberPlayerPosition", n => { RememberPlayerPosition = n.GetBoolValue(); } },
                { "ReplicationRegions", n => { ReplicationRegions = n.GetCollectionOfEnumValues<global::BunnyApiClient.Models.StreamVideoLibrary.ReplicationRegions>()?.ToList(); } },
                { "ShowHeatmap", n => { ShowHeatmap = n.GetBoolValue(); } },
                { "StorageUsage", n => { StorageUsage = n.GetLongValue(); } },
                { "StorageZoneId", n => { StorageZoneId = n.GetLongValue(); } },
                { "TrafficUsage", n => { TrafficUsage = n.GetLongValue(); } },
                { "TranscribingCaptionLanguages", n => { TranscribingCaptionLanguages = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "UILanguage", n => { UILanguage = n.GetStringValue(); } },
                { "VastTagUrl", n => { VastTagUrl = n.GetStringValue(); } },
                { "ViAiPublisherId", n => { ViAiPublisherId = n.GetStringValue(); } },
                { "VideoCount", n => { VideoCount = n.GetLongValue(); } },
                { "WatermarkHeight", n => { WatermarkHeight = n.GetIntValue(); } },
                { "WatermarkPositionLeft", n => { WatermarkPositionLeft = n.GetIntValue(); } },
                { "WatermarkPositionTop", n => { WatermarkPositionTop = n.GetIntValue(); } },
                { "WatermarkVersion", n => { WatermarkVersion = n.GetLongValue(); } },
                { "WatermarkWidth", n => { WatermarkWidth = n.GetIntValue(); } },
                { "WebhookUrl", n => { WebhookUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("AllowDirectPlay", AllowDirectPlay);
            writer.WriteBoolValue("AllowEarlyPlay", AllowEarlyPlay);
            writer.WriteIntValue("Bitrate1080p", Bitrate1080p);
            writer.WriteIntValue("Bitrate1440p", Bitrate1440p);
            writer.WriteIntValue("Bitrate2160p", Bitrate2160p);
            writer.WriteIntValue("Bitrate240p", Bitrate240p);
            writer.WriteIntValue("Bitrate360p", Bitrate360p);
            writer.WriteIntValue("Bitrate480p", Bitrate480p);
            writer.WriteIntValue("Bitrate720p", Bitrate720p);
            writer.WriteBoolValue("BlockNoneReferrer", BlockNoneReferrer);
            writer.WriteStringValue("CaptionsBackground", CaptionsBackground);
            writer.WriteStringValue("CaptionsFontColor", CaptionsFontColor);
            writer.WriteIntValue("CaptionsFontSize", CaptionsFontSize);
            writer.WriteStringValue("Controls", Controls);
            writer.WriteStringValue("CustomHTML", CustomHTML);
            writer.WriteBoolValue("EnableContentTagging", EnableContentTagging);
            writer.WriteStringValue("EnabledResolutions", EnabledResolutions);
            writer.WriteBoolValue("EnableDRM", EnableDRM);
            writer.WriteBoolValue("EnableMP4Fallback", EnableMP4Fallback);
            writer.WriteBoolValue("EnableTranscribing", EnableTranscribing);
            writer.WriteBoolValue("EnableTranscribingDescriptionGeneration", EnableTranscribingDescriptionGeneration);
            writer.WriteBoolValue("EnableTranscribingTitleGeneration", EnableTranscribingTitleGeneration);
            writer.WriteStringValue("FontFamily", FontFamily);
            writer.WriteBoolValue("KeepOriginalFiles", KeepOriginalFiles);
            writer.WriteStringValue("Name", Name);
            writer.WriteStringValue("PlayerKeyColor", PlayerKeyColor);
            writer.WriteBoolValue("PlayerTokenAuthenticationEnabled", PlayerTokenAuthenticationEnabled);
            writer.WriteBoolValue("ShowHeatmap", ShowHeatmap);
            writer.WriteCollectionOfPrimitiveValues<string>("TranscribingCaptionLanguages", TranscribingCaptionLanguages);
            writer.WriteStringValue("UILanguage", UILanguage);
            writer.WriteStringValue("VastTagUrl", VastTagUrl);
            writer.WriteStringValue("ViAiPublisherId", ViAiPublisherId);
            writer.WriteIntValue("WatermarkHeight", WatermarkHeight);
            writer.WriteIntValue("WatermarkPositionLeft", WatermarkPositionLeft);
            writer.WriteIntValue("WatermarkPositionTop", WatermarkPositionTop);
            writer.WriteIntValue("WatermarkWidth", WatermarkWidth);
            writer.WriteStringValue("WebhookUrl", WebhookUrl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
