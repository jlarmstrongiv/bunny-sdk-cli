// <auto-generated/>
using EdgeStorageApiClient.Item.Item.Item;
using EdgeStorageApiClient.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Cli.Commons.Extensions;
using Microsoft.Kiota.Cli.Commons.IO;
using Microsoft.Kiota.Cli.Commons;
using System.Collections.Generic;
using System.CommandLine;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace EdgeStorageApiClient.Item.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \{storageZoneName}\{path}
    /// </summary>
    public class WithPathItemRequestBuilder : BaseCliRequestBuilder
    {
        /// <summary>
        /// Gets an item from the EdgeStorageApiClient.item.item.item collection
        /// </summary>
        /// <returns>A Tuple&lt;List&lt;Command&gt;, List&lt;Command&gt;&gt;</returns>
        public Tuple<List<Command>, List<Command>> BuildCommand()
        {
            var executables = new List<Command>();
            var builder = new global::EdgeStorageApiClient.Item.Item.Item.WithFileNameItemRequestBuilder(PathParameters);
            executables.Add(builder.BuildDeleteCommand());
            executables.Add(builder.BuildGetCommand());
            executables.Add(builder.BuildPutCommand());
            return new(executables, new(0));
        }
        /// <summary>
        /// [ListFiles API Docs](https://docs.bunny.net/reference/get_-storagezonename-path-)
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildListCommand()
        {
            var command = new Command("list");
            command.Description = "[ListFiles API Docs](https://docs.bunny.net/reference/get_-storagezonename-path-)";
            var storageZoneNameOption = new Option<string>("--storage-zone-name", description: "the name of your storage zone where you are connecting to.") {
            };
            storageZoneNameOption.IsRequired = true;
            command.AddOption(storageZoneNameOption);
            var pathOption = new Option<string>("--path", description: "The directory path that you want to list.") {
            };
            pathOption.IsRequired = true;
            command.AddOption(pathOption);
            var outputOption = new Option<FormatterType>("--output", () => FormatterType.JSON);
            command.AddOption(outputOption);
            var queryOption = new Option<string>("--query");
            command.AddOption(queryOption);
            command.SetHandler(async (invocationContext) => {
                var storageZoneName = invocationContext.ParseResult.GetValueForOption(storageZoneNameOption);
                var path = invocationContext.ParseResult.GetValueForOption(pathOption);
                var output = invocationContext.ParseResult.GetValueForOption(outputOption);
                var query = invocationContext.ParseResult.GetValueForOption(queryOption);
                IOutputFilter outputFilter = invocationContext.BindingContext.GetService(typeof(IOutputFilter)) as IOutputFilter ?? throw new ArgumentNullException("outputFilter");
                IOutputFormatterFactory outputFormatterFactory = invocationContext.BindingContext.GetService(typeof(IOutputFormatterFactory)) as IOutputFormatterFactory ?? throw new ArgumentNullException("outputFormatterFactory");
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToGetRequestInformation(q => {
                });
                if (storageZoneName is not null) requestInfo.PathParameters.Add("storageZoneName", storageZoneName);
                if (path is not null) requestInfo.PathParameters.Add("path", path);
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: default, cancellationToken: cancellationToken) ?? Stream.Null;
                response = (response != Stream.Null) ? await outputFilter.FilterOutputAsync(response, query, cancellationToken) : response;
                var formatter = outputFormatterFactory.GetFormatter(output);
                await formatter.WriteOutputAsync(response, cancellationToken);
            });
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="EdgeStorageApiClient.Item.Item.WithPathItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        public WithPathItemRequestBuilder(Dictionary<string, object> pathParameters) : base("{+baseurl}/{storageZoneName}/{path}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="EdgeStorageApiClient.Item.Item.WithPathItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public WithPathItemRequestBuilder(string rawUrl) : base("{+baseurl}/{storageZoneName}/{path}", rawUrl)
        {
        }
        /// <summary>
        /// [ListFiles API Docs](https://docs.bunny.net/reference/get_-storagezonename-path-)
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
    }
}
