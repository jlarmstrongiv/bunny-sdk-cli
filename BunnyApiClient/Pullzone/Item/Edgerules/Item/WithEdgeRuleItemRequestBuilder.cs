// <auto-generated/>
using BunnyApiClient.Pullzone.Item.Edgerules.Item.SetEdgeRuleEnabled;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Cli.Commons.Extensions;
using Microsoft.Kiota.Cli.Commons.IO;
using Microsoft.Kiota.Cli.Commons;
using System.Collections.Generic;
using System.CommandLine;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace BunnyApiClient.Pullzone.Item.Edgerules.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \pullzone\{-id}\edgerules\{edgeRuleId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class WithEdgeRuleItemRequestBuilder : BaseCliRequestBuilder
    {
        /// <summary>
        /// [DeleteEdgeRule API Docs](https://docs.bunny.net/reference/pullzonepublic_deleteedgerule)
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeleteCommand()
        {
            var command = new Command("delete");
            command.Description = "[DeleteEdgeRule API Docs](https://docs.bunny.net/reference/pullzonepublic_deleteedgerule)";
            var pullZoneIdOption = new Option<long?>("--pull-zone-id", description: "The ID of the Pull Zone that contains the Edge Rule") {
            };
            pullZoneIdOption.IsRequired = true;
            command.AddOption(pullZoneIdOption);
            var edgeRuleIdOption = new Option<string>("--edge-rule-id", description: "The ID of the Edge Rule that should be deleted") {
            };
            edgeRuleIdOption.IsRequired = true;
            command.AddOption(edgeRuleIdOption);
            command.SetHandler(async (invocationContext) => {
                var pullZoneId = invocationContext.ParseResult.GetValueForOption(pullZoneIdOption);
                var edgeRuleId = invocationContext.ParseResult.GetValueForOption(edgeRuleIdOption);
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToDeleteRequestInformation(q => {
                });
                if (pullZoneId is not null) requestInfo.PathParameters.Add("pullZoneId", pullZoneId);
                if (edgeRuleId is not null) requestInfo.PathParameters.Add("edgeRuleId", edgeRuleId);
                await reqAdapter.SendNoContentAsync(requestInfo, errorMapping: default, cancellationToken: cancellationToken);
                Console.WriteLine("Success");
            });
            return command;
        }
        /// <summary>
        /// The setEdgeRuleEnabled property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSetEdgeRuleEnabledNavCommand()
        {
            var command = new Command("set-edge-rule-enabled");
            command.Description = "The setEdgeRuleEnabled property";
            var builder = new global::BunnyApiClient.Pullzone.Item.Edgerules.Item.SetEdgeRuleEnabled.SetEdgeRuleEnabledRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BunnyApiClient.Pullzone.Item.Edgerules.Item.WithEdgeRuleItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        public WithEdgeRuleItemRequestBuilder(Dictionary<string, object> pathParameters) : base("{+baseurl}/pullzone/{%2Did}/edgerules/{edgeRuleId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BunnyApiClient.Pullzone.Item.Edgerules.Item.WithEdgeRuleItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public WithEdgeRuleItemRequestBuilder(string rawUrl) : base("{+baseurl}/pullzone/{%2Did}/edgerules/{edgeRuleId}", rawUrl)
        {
        }
        /// <summary>
        /// [DeleteEdgeRule API Docs](https://docs.bunny.net/reference/pullzonepublic_deleteedgerule)
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
    }
}
