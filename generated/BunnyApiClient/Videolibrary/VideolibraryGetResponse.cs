// <auto-generated/>
using BunnyApiClient.Models.StreamVideoLibrary;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace BunnyApiClient.Videolibrary
{
    #pragma warning disable CS1591
    public class VideolibraryGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The CurrentPage property</summary>
        public int? CurrentPage { get; set; }
        /// <summary>The HasMoreItems property</summary>
        public bool? HasMoreItems { get; set; }
        /// <summary>The Items property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::BunnyApiClient.Models.StreamVideoLibrary.VideoLibrary>? Items { get; set; }
#nullable restore
#else
        public List<global::BunnyApiClient.Models.StreamVideoLibrary.VideoLibrary> Items { get; set; }
#endif
        /// <summary>The TotalItems property</summary>
        public int? TotalItems { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="BunnyApiClient.Videolibrary.VideolibraryGetResponse"/> and sets the default values.
        /// </summary>
        public VideolibraryGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="BunnyApiClient.Videolibrary.VideolibraryGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::BunnyApiClient.Videolibrary.VideolibraryGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::BunnyApiClient.Videolibrary.VideolibraryGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "CurrentPage", n => { CurrentPage = n.GetIntValue(); } },
                { "HasMoreItems", n => { HasMoreItems = n.GetBoolValue(); } },
                { "Items", n => { Items = n.GetCollectionOfObjectValues<global::BunnyApiClient.Models.StreamVideoLibrary.VideoLibrary>(global::BunnyApiClient.Models.StreamVideoLibrary.VideoLibrary.CreateFromDiscriminatorValue)?.ToList(); } },
                { "TotalItems", n => { TotalItems = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("CurrentPage", CurrentPage);
            writer.WriteBoolValue("HasMoreItems", HasMoreItems);
            writer.WriteCollectionOfObjectValues<global::BunnyApiClient.Models.StreamVideoLibrary.VideoLibrary>("Items", Items);
            writer.WriteIntValue("TotalItems", TotalItems);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
