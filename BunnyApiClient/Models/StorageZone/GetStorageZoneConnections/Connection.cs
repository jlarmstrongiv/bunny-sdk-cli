// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace BunnyApiClient.Models.StorageZone.GetStorageZoneConnections
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    #pragma warning disable CS1591
    public partial class Connection : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The ConnectionType property</summary>
        public double? ConnectionType { get; set; }
        /// <summary>The main custom connected CDN domain</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MainCustomDomain { get; set; }
#nullable restore
#else
        public string MainCustomDomain { get; set; }
#endif
        /// <summary>The total amount of bandwidth served by this zone this month</summary>
        public double? MonthlyBandwidthUsed { get; set; }
        /// <summary>The total monthly charges incurred by this zone</summary>
        public double? MonthlyCharges { get; set; }
        /// <summary>The ID of the connected pull zone</summary>
        public long? PullZoneId { get; set; }
        /// <summary>The name of the connected pull zone</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PullZoneName { get; set; }
#nullable restore
#else
        public string PullZoneName { get; set; }
#endif
        /// <summary>The Tier property</summary>
        public double? Tier { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::BunnyApiClient.Models.StorageZone.GetStorageZoneConnections.Connection"/> and sets the default values.
        /// </summary>
        public Connection()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::BunnyApiClient.Models.StorageZone.GetStorageZoneConnections.Connection"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::BunnyApiClient.Models.StorageZone.GetStorageZoneConnections.Connection CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::BunnyApiClient.Models.StorageZone.GetStorageZoneConnections.Connection();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ConnectionType", n => { ConnectionType = n.GetDoubleValue(); } },
                { "MainCustomDomain", n => { MainCustomDomain = n.GetStringValue(); } },
                { "MonthlyBandwidthUsed", n => { MonthlyBandwidthUsed = n.GetDoubleValue(); } },
                { "MonthlyCharges", n => { MonthlyCharges = n.GetDoubleValue(); } },
                { "PullZoneId", n => { PullZoneId = n.GetLongValue(); } },
                { "PullZoneName", n => { PullZoneName = n.GetStringValue(); } },
                { "Tier", n => { Tier = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("ConnectionType", ConnectionType);
            writer.WriteStringValue("MainCustomDomain", MainCustomDomain);
            writer.WriteDoubleValue("MonthlyBandwidthUsed", MonthlyBandwidthUsed);
            writer.WriteDoubleValue("MonthlyCharges", MonthlyCharges);
            writer.WriteLongValue("PullZoneId", PullZoneId);
            writer.WriteStringValue("PullZoneName", PullZoneName);
            writer.WriteDoubleValue("Tier", Tier);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
