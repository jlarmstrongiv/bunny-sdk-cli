// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace StreamApiClient.Models.ManageVideos.VideoResolutionsInfo
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class VideoResolutionsInfoData : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The availableResolutions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AvailableResolutions { get; set; }
#nullable restore
#else
        public List<string> AvailableResolutions { get; set; }
#endif
        /// <summary>The configuredResolutions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ConfiguredResolutions { get; set; }
#nullable restore
#else
        public List<string> ConfiguredResolutions { get; set; }
#endif
        /// <summary>The hasOriginal property</summary>
        public bool? HasOriginal { get; set; }
        /// <summary>The mp4Resolutions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::StreamApiClient.Models.ManageVideos.VideoResolutionsInfo.Resolutions? Mp4Resolutions { get; set; }
#nullable restore
#else
        public global::StreamApiClient.Models.ManageVideos.VideoResolutionsInfo.Resolutions Mp4Resolutions { get; set; }
#endif
        /// <summary>The playlistResolutions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::StreamApiClient.Models.ManageVideos.VideoResolutionsInfo.Resolutions? PlaylistResolutions { get; set; }
#nullable restore
#else
        public global::StreamApiClient.Models.ManageVideos.VideoResolutionsInfo.Resolutions PlaylistResolutions { get; set; }
#endif
        /// <summary>The storageResolutions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::StreamApiClient.Models.ManageVideos.VideoResolutionsInfo.Resolutions? StorageResolutions { get; set; }
#nullable restore
#else
        public global::StreamApiClient.Models.ManageVideos.VideoResolutionsInfo.Resolutions StorageResolutions { get; set; }
#endif
        /// <summary>The videoId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VideoId { get; set; }
#nullable restore
#else
        public string VideoId { get; set; }
#endif
        /// <summary>The videoLibraryId property</summary>
        public long? VideoLibraryId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::StreamApiClient.Models.ManageVideos.VideoResolutionsInfo.VideoResolutionsInfoData"/> and sets the default values.
        /// </summary>
        public VideoResolutionsInfoData()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::StreamApiClient.Models.ManageVideos.VideoResolutionsInfo.VideoResolutionsInfoData"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::StreamApiClient.Models.ManageVideos.VideoResolutionsInfo.VideoResolutionsInfoData CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::StreamApiClient.Models.ManageVideos.VideoResolutionsInfo.VideoResolutionsInfoData();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "availableResolutions", n => { AvailableResolutions = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "configuredResolutions", n => { ConfiguredResolutions = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "hasOriginal", n => { HasOriginal = n.GetBoolValue(); } },
                { "mp4Resolutions", n => { Mp4Resolutions = n.GetObjectValue<global::StreamApiClient.Models.ManageVideos.VideoResolutionsInfo.Resolutions>(global::StreamApiClient.Models.ManageVideos.VideoResolutionsInfo.Resolutions.CreateFromDiscriminatorValue); } },
                { "playlistResolutions", n => { PlaylistResolutions = n.GetObjectValue<global::StreamApiClient.Models.ManageVideos.VideoResolutionsInfo.Resolutions>(global::StreamApiClient.Models.ManageVideos.VideoResolutionsInfo.Resolutions.CreateFromDiscriminatorValue); } },
                { "storageResolutions", n => { StorageResolutions = n.GetObjectValue<global::StreamApiClient.Models.ManageVideos.VideoResolutionsInfo.Resolutions>(global::StreamApiClient.Models.ManageVideos.VideoResolutionsInfo.Resolutions.CreateFromDiscriminatorValue); } },
                { "videoId", n => { VideoId = n.GetStringValue(); } },
                { "videoLibraryId", n => { VideoLibraryId = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("availableResolutions", AvailableResolutions);
            writer.WriteCollectionOfPrimitiveValues<string>("configuredResolutions", ConfiguredResolutions);
            writer.WriteBoolValue("hasOriginal", HasOriginal);
            writer.WriteObjectValue<global::StreamApiClient.Models.ManageVideos.VideoResolutionsInfo.Resolutions>("mp4Resolutions", Mp4Resolutions);
            writer.WriteObjectValue<global::StreamApiClient.Models.ManageVideos.VideoResolutionsInfo.Resolutions>("playlistResolutions", PlaylistResolutions);
            writer.WriteObjectValue<global::StreamApiClient.Models.ManageVideos.VideoResolutionsInfo.Resolutions>("storageResolutions", StorageResolutions);
            writer.WriteStringValue("videoId", VideoId);
            writer.WriteLongValue("videoLibraryId", VideoLibraryId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
