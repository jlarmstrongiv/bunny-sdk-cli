// <auto-generated/>
#pragma warning disable CS0618
using BunnyApiClient.Shield.Waf.CustomRule;
using BunnyApiClient.Shield.Waf.CustomRules;
using BunnyApiClient.Shield.Waf.EngineConfig;
using BunnyApiClient.Shield.Waf.Enums;
using BunnyApiClient.Shield.Waf.Profiles;
using BunnyApiClient.Shield.Waf.Rules;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Cli.Commons.IO;
using Microsoft.Kiota.Cli.Commons;
using System.Collections.Generic;
using System.CommandLine;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using System;
namespace BunnyApiClient.Shield.Waf
{
    /// <summary>
    /// Builds and executes requests for operations under \shield\waf
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WafRequestBuilder : BaseCliRequestBuilder
    {
        /// <summary>
        /// The customRule property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCustomRuleNavCommand()
        {
            var command = new Command("custom-rule");
            command.Description = "The customRule property";
            var builder = new global::BunnyApiClient.Shield.Waf.CustomRule.CustomRuleRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildCreateCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The customRules property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCustomRulesNavCommand()
        {
            var command = new Command("custom-rules");
            command.Description = "The customRules property";
            var builder = new global::BunnyApiClient.Shield.Waf.CustomRules.CustomRulesRequestBuilder(PathParameters);
            var nonExecCommands = new List<Command>();
            var cmds = builder.BuildCommand();
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The engineConfig property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildEngineConfigNavCommand()
        {
            var command = new Command("engine-config");
            command.Description = "The engineConfig property";
            var builder = new global::BunnyApiClient.Shield.Waf.EngineConfig.EngineConfigRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The enums property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildEnumsNavCommand()
        {
            var command = new Command("enums");
            command.Description = "The enums property";
            var builder = new global::BunnyApiClient.Shield.Waf.Enums.EnumsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The profiles property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildProfilesNavCommand()
        {
            var command = new Command("profiles");
            command.Description = "The profiles property";
            var builder = new global::BunnyApiClient.Shield.Waf.Profiles.ProfilesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The rules property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRulesNavCommand()
        {
            var command = new Command("rules");
            command.Description = "The rules property";
            var builder = new global::BunnyApiClient.Shield.Waf.Rules.RulesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BunnyApiClient.Shield.Waf.WafRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        public WafRequestBuilder(Dictionary<string, object> pathParameters) : base("{+baseurl}/shield/waf", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BunnyApiClient.Shield.Waf.WafRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public WafRequestBuilder(string rawUrl) : base("{+baseurl}/shield/waf", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618
