// <auto-generated/>
#pragma warning disable CS0618
using BunnyApiClient.Abusecase;
using BunnyApiClient.Apikey;
using BunnyApiClient.Billing;
using BunnyApiClient.Compute;
using BunnyApiClient.Country;
using BunnyApiClient.Dmca;
using BunnyApiClient.Dnszone;
using BunnyApiClient.Integration;
using BunnyApiClient.Pullzone;
using BunnyApiClient.Purge;
using BunnyApiClient.Region;
using BunnyApiClient.Search;
using BunnyApiClient.Shield;
using BunnyApiClient.Statistics;
using BunnyApiClient.Storagezone;
using BunnyApiClient.User;
using BunnyApiClient.Videolibrary;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Cli.Commons.IO;
using Microsoft.Kiota.Cli.Commons;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using System.Collections.Generic;
using System.CommandLine;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using System;
namespace BunnyApiClient
{
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class BunnyApiClient : BaseCliRequestBuilder
    {
        /// <summary>
        /// The abusecase property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAbusecaseNavCommand()
        {
            var command = new Command("abusecase");
            command.Description = "The abusecase property";
            var builder = new global::BunnyApiClient.Abusecase.AbusecaseRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The apikey property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildApikeyNavCommand()
        {
            var command = new Command("apikey");
            command.Description = "The apikey property";
            var builder = new global::BunnyApiClient.Apikey.ApikeyRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The billing property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildBillingNavCommand()
        {
            var command = new Command("billing");
            command.Description = "The billing property";
            var builder = new global::BunnyApiClient.Billing.BillingRequestBuilder(PathParameters);
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAffiliateNavCommand());
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The compute property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildComputeNavCommand()
        {
            var command = new Command("compute");
            command.Description = "The compute property";
            var builder = new global::BunnyApiClient.Compute.ComputeRequestBuilder(PathParameters);
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildScriptNavCommand());
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The country property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCountryNavCommand()
        {
            var command = new Command("country");
            command.Description = "The country property";
            var builder = new global::BunnyApiClient.Country.CountryRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The dmca property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDmcaNavCommand()
        {
            var command = new Command("dmca");
            command.Description = "The dmca property";
            var builder = new global::BunnyApiClient.Dmca.DmcaRequestBuilder(PathParameters);
            var nonExecCommands = new List<Command>();
            var cmds = builder.BuildCommand();
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The dnszone property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDnszoneNavCommand()
        {
            var command = new Command("dnszone");
            command.Description = "The dnszone property";
            var builder = new global::BunnyApiClient.Dnszone.DnszoneRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCheckavailabilityNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The integration property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIntegrationNavCommand()
        {
            var command = new Command("integration");
            command.Description = "The integration property";
            var builder = new global::BunnyApiClient.Integration.IntegrationRequestBuilder(PathParameters);
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildGithubNavCommand());
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The pullzone property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPullzoneNavCommand()
        {
            var command = new Command("pullzone");
            command.Description = "The pullzone property";
            var builder = new global::BunnyApiClient.Pullzone.PullzoneRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCheckavailabilityNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildLoadFreeCertificateNavCommand());
            nonExecCommands.Add(builder.BuildSetZoneSecurityEnabledNavCommand());
            nonExecCommands.Add(builder.BuildSetZoneSecurityIncludeHashRemoteIPEnabledNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The purge property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPurgeNavCommand()
        {
            var command = new Command("purge");
            command.Description = "The purge property";
            var builder = new global::BunnyApiClient.Purge.PurgeRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The region property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRegionNavCommand()
        {
            var command = new Command("region");
            command.Description = "The region property";
            var builder = new global::BunnyApiClient.Region.RegionRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BunnyApiClient.BunnyApiClient"/> and sets the default values.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRootCommand()
        {
            var command = new RootCommand();
            command.Description = "Instantiates a new BunnyApiClient and sets the default values.";
            command.AddCommand(BuildAbusecaseNavCommand());
            command.AddCommand(BuildApikeyNavCommand());
            command.AddCommand(BuildBillingNavCommand());
            command.AddCommand(BuildComputeNavCommand());
            command.AddCommand(BuildCountryNavCommand());
            command.AddCommand(BuildDmcaNavCommand());
            command.AddCommand(BuildDnszoneNavCommand());
            command.AddCommand(BuildIntegrationNavCommand());
            command.AddCommand(BuildPullzoneNavCommand());
            command.AddCommand(BuildPurgeNavCommand());
            command.AddCommand(BuildRegionNavCommand());
            command.AddCommand(BuildSearchNavCommand());
            command.AddCommand(BuildShieldNavCommand());
            command.AddCommand(BuildStatisticsNavCommand());
            command.AddCommand(BuildStoragezoneNavCommand());
            command.AddCommand(BuildUserNavCommand());
            command.AddCommand(BuildVideolibraryNavCommand());
            return command;
        }
        /// <summary>
        /// The search property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSearchNavCommand()
        {
            var command = new Command("search");
            command.Description = "The search property";
            var builder = new global::BunnyApiClient.Search.SearchRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The shield property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildShieldNavCommand()
        {
            var command = new Command("shield");
            command.Description = "The shield property";
            var builder = new global::BunnyApiClient.Shield.ShieldRequestBuilder(PathParameters);
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildMetricsNavCommand());
            nonExecCommands.Add(builder.BuildRateLimitNavCommand());
            nonExecCommands.Add(builder.BuildRateLimitsNavCommand());
            nonExecCommands.Add(builder.BuildShieldZoneNavCommand());
            nonExecCommands.Add(builder.BuildShieldZonesNavCommand());
            nonExecCommands.Add(builder.BuildWafNavCommand());
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The statistics property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildStatisticsNavCommand()
        {
            var command = new Command("statistics");
            command.Description = "The statistics property";
            var builder = new global::BunnyApiClient.Statistics.StatisticsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The storagezone property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildStoragezoneNavCommand()
        {
            var command = new Command("storagezone");
            command.Description = "The storagezone property";
            var builder = new global::BunnyApiClient.Storagezone.StoragezoneRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCheckavailabilityNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildResetReadOnlyPasswordNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The user property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUserNavCommand()
        {
            var command = new Command("user");
            command.Description = "The user property";
            var builder = new global::BunnyApiClient.User.UserRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The videolibrary property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildVideolibraryNavCommand()
        {
            var command = new Command("videolibrary");
            command.Description = "The videolibrary property";
            var builder = new global::BunnyApiClient.Videolibrary.VideolibraryRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildLanguagesNavCommand());
            execCommands.Add(builder.BuildListCommand());
            nonExecCommands.Add(builder.BuildResetApiKeyNavCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BunnyApiClient.BunnyApiClient"/> and sets the default values.
        /// </summary>
        public BunnyApiClient() : base("{+baseurl}", new Dictionary<string, object>())
        {
        }
    }
}
#pragma warning restore CS0618
