// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Cli.Commons.Extensions;
using Microsoft.Kiota.Cli.Commons.IO;
using Microsoft.Kiota.Cli.Commons;
using StreamApiClient.Models.ManageVideos.CleanupUnconfiguredResolutions;
using System.Collections.Generic;
using System.CommandLine;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace StreamApiClient.Library.Item.Videos.Item.Resolutions.Cleanup
{
    /// <summary>
    /// Builds and executes requests for operations under \library\{libraryId}\videos\{videoId}\resolutions\cleanup
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CleanupRequestBuilder : BaseCliRequestBuilder
    {
        /// <summary>
        /// [CleanupUnconfiguredResolutions API Docs](https://docs.bunny.net/reference/video_deleteresolutions)
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPostCommand()
        {
            var command = new Command("post");
            command.Description = "[CleanupUnconfiguredResolutions API Docs](https://docs.bunny.net/reference/video_deleteresolutions)";
            var libraryIdOption = new Option<long?>("--library-id", description: "The ID of the Video Library") {
            };
            libraryIdOption.IsRequired = true;
            command.AddOption(libraryIdOption);
            var videoIdOption = new Option<long?>("--video-id", description: "The ID of the Video") {
            };
            videoIdOption.IsRequired = true;
            command.AddOption(videoIdOption);
            var resolutionsToDeleteOption = new Option<string>("--resolutions-to-delete") {
            };
            resolutionsToDeleteOption.IsRequired = false;
            command.AddOption(resolutionsToDeleteOption);
            var deleteNonConfiguredResolutionsOption = new Option<bool?>("--delete-non-configured-resolutions") {
            };
            deleteNonConfiguredResolutionsOption.IsRequired = false;
            command.AddOption(deleteNonConfiguredResolutionsOption);
            var deleteOriginalOption = new Option<bool?>("--delete-original") {
            };
            deleteOriginalOption.IsRequired = false;
            command.AddOption(deleteOriginalOption);
            var deleteMp4FilesOption = new Option<bool?>("--delete-mp4files") {
            };
            deleteMp4FilesOption.IsRequired = false;
            command.AddOption(deleteMp4FilesOption);
            var outputOption = new Option<FormatterType>("--output", () => FormatterType.JSON);
            command.AddOption(outputOption);
            var queryOption = new Option<string>("--query");
            command.AddOption(queryOption);
            command.SetHandler(async (invocationContext) => {
                var libraryId = invocationContext.ParseResult.GetValueForOption(libraryIdOption);
                var videoId = invocationContext.ParseResult.GetValueForOption(videoIdOption);
                var resolutionsToDelete = invocationContext.ParseResult.GetValueForOption(resolutionsToDeleteOption);
                var deleteNonConfiguredResolutions = invocationContext.ParseResult.GetValueForOption(deleteNonConfiguredResolutionsOption);
                var deleteOriginal = invocationContext.ParseResult.GetValueForOption(deleteOriginalOption);
                var deleteMp4Files = invocationContext.ParseResult.GetValueForOption(deleteMp4FilesOption);
                var output = invocationContext.ParseResult.GetValueForOption(outputOption);
                var query = invocationContext.ParseResult.GetValueForOption(queryOption);
                IOutputFilter outputFilter = invocationContext.BindingContext.GetService(typeof(IOutputFilter)) as IOutputFilter ?? throw new ArgumentNullException("outputFilter");
                IOutputFormatterFactory outputFormatterFactory = invocationContext.BindingContext.GetService(typeof(IOutputFormatterFactory)) as IOutputFormatterFactory ?? throw new ArgumentNullException("outputFormatterFactory");
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToPostRequestInformation(q => {
                    if (!string.IsNullOrEmpty(resolutionsToDelete)) q.QueryParameters.ResolutionsToDelete = resolutionsToDelete;
                    q.QueryParameters.DeleteNonConfiguredResolutions = deleteNonConfiguredResolutions;
                    q.QueryParameters.DeleteOriginal = deleteOriginal;
                    q.QueryParameters.DeleteMp4Files = deleteMp4Files;
                });
                if (libraryId is not null) requestInfo.PathParameters.Add("libraryId", libraryId);
                if (videoId is not null) requestInfo.PathParameters.Add("videoId", videoId);
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: default, cancellationToken: cancellationToken) ?? Stream.Null;
                response = (response != Stream.Null) ? await outputFilter.FilterOutputAsync(response, query, cancellationToken) : response;
                var formatter = outputFormatterFactory.GetFormatter(output);
                await formatter.WriteOutputAsync(response, cancellationToken);
            });
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="global::StreamApiClient.Library.Item.Videos.Item.Resolutions.Cleanup.CleanupRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        public CleanupRequestBuilder(Dictionary<string, object> pathParameters) : base("{+baseurl}/library/{libraryId}/videos/{videoId}/resolutions/cleanup{?deleteMp4Files,deleteNonConfiguredResolutions,deleteOriginal,resolutionsToDelete}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::StreamApiClient.Library.Item.Videos.Item.Resolutions.Cleanup.CleanupRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public CleanupRequestBuilder(string rawUrl) : base("{+baseurl}/library/{libraryId}/videos/{videoId}/resolutions/cleanup{?deleteMp4Files,deleteNonConfiguredResolutions,deleteOriginal,resolutionsToDelete}", rawUrl)
        {
        }
        /// <summary>
        /// [CleanupUnconfiguredResolutions API Docs](https://docs.bunny.net/reference/video_deleteresolutions)
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<global::StreamApiClient.Library.Item.Videos.Item.Resolutions.Cleanup.CleanupRequestBuilder.CleanupRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<global::StreamApiClient.Library.Item.Videos.Item.Resolutions.Cleanup.CleanupRequestBuilder.CleanupRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// [CleanupUnconfiguredResolutions API Docs](https://docs.bunny.net/reference/video_deleteresolutions)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CleanupRequestBuilderPostQueryParameters 
        {
            [QueryParameter("deleteMp4Files")]
            public bool? DeleteMp4Files { get; set; }
            [QueryParameter("deleteNonConfiguredResolutions")]
            public bool? DeleteNonConfiguredResolutions { get; set; }
            [QueryParameter("deleteOriginal")]
            public bool? DeleteOriginal { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("resolutionsToDelete")]
            public string? ResolutionsToDelete { get; set; }
#nullable restore
#else
            [QueryParameter("resolutionsToDelete")]
            public string ResolutionsToDelete { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
