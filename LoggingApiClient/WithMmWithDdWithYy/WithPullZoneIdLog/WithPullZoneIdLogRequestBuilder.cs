// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Cli.Commons.Extensions;
using Microsoft.Kiota.Cli.Commons.IO;
using Microsoft.Kiota.Cli.Commons;
using System.Collections.Generic;
using System.CommandLine;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace LoggingApiClient.WithMmWithDdWithYy.WithPullZoneIdLog
{
    /// <summary>
    /// Builds and executes requests for operations under \{mm}-{dd}-{yy}\{pullZoneId}.log
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithPullZoneIdLogRequestBuilder : BaseCliRequestBuilder
    {
        /// <summary>
        /// [LoggingApi API Docs](https://docs.bunny.net/docs/cdn-logging-api)
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetCommand()
        {
            var command = new Command("get");
            command.Description = "[LoggingApi API Docs](https://docs.bunny.net/docs/cdn-logging-api)";
            var mmOption = new Option<string>("--mm") {
            };
            mmOption.IsRequired = true;
            command.AddOption(mmOption);
            var ddOption = new Option<string>("--dd") {
            };
            ddOption.IsRequired = true;
            command.AddOption(ddOption);
            var yyOption = new Option<string>("--yy") {
            };
            yyOption.IsRequired = true;
            command.AddOption(yyOption);
            var pullZoneIdOption = new Option<long?>("--pull-zone-id") {
            };
            pullZoneIdOption.IsRequired = true;
            command.AddOption(pullZoneIdOption);
            var acceptEncodingOption = new Option<string[]>("--accept-encoding") {
                Arity = ArgumentArity.OneOrMore
            };
            acceptEncodingOption.IsRequired = true;
            command.AddOption(acceptEncodingOption);
            var startOption = new Option<long?>("--start") {
            };
            startOption.IsRequired = true;
            command.AddOption(startOption);
            var endOption = new Option<long?>("--end") {
            };
            endOption.IsRequired = true;
            command.AddOption(endOption);
            var orderOption = new Option<string>("--order") {
            };
            orderOption.IsRequired = true;
            command.AddOption(orderOption);
            var statusOption = new Option<string>("--status") {
            };
            statusOption.IsRequired = true;
            command.AddOption(statusOption);
            var searchOption = new Option<string>("--search") {
            };
            searchOption.IsRequired = true;
            command.AddOption(searchOption);
            var outputFileOption = new Option<FileInfo>("--output-file");
            command.AddOption(outputFileOption);
            command.SetHandler(async (invocationContext) => {
                var mm = invocationContext.ParseResult.GetValueForOption(mmOption);
                var dd = invocationContext.ParseResult.GetValueForOption(ddOption);
                var yy = invocationContext.ParseResult.GetValueForOption(yyOption);
                var pullZoneId = invocationContext.ParseResult.GetValueForOption(pullZoneIdOption);
                var acceptEncoding = invocationContext.ParseResult.GetValueForOption(acceptEncodingOption);
                var start = invocationContext.ParseResult.GetValueForOption(startOption);
                var end = invocationContext.ParseResult.GetValueForOption(endOption);
                var order = invocationContext.ParseResult.GetValueForOption(orderOption);
                var status = invocationContext.ParseResult.GetValueForOption(statusOption);
                var search = invocationContext.ParseResult.GetValueForOption(searchOption);
                var outputFile = invocationContext.ParseResult.GetValueForOption(outputFileOption);
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToGetRequestInformation(q => {
                    q.QueryParameters.Start = start;
                    q.QueryParameters.End = end;
                    if (!string.IsNullOrEmpty(order)) q.QueryParameters.Order = order;
                    if (!string.IsNullOrEmpty(status)) q.QueryParameters.Status = status;
                    if (!string.IsNullOrEmpty(search)) q.QueryParameters.Search = search;
                });
                if (mm is not null) requestInfo.PathParameters.Add("mm", mm);
                if (dd is not null) requestInfo.PathParameters.Add("dd", dd);
                if (yy is not null) requestInfo.PathParameters.Add("yy", yy);
                if (pullZoneId is not null) requestInfo.PathParameters.Add("pullZoneId", pullZoneId);
                if (acceptEncoding is not null) requestInfo.Headers.Add("accept-encoding", acceptEncoding);
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: default, cancellationToken: cancellationToken) ?? Stream.Null;
                if (outputFile == null) {
                    using var reader = new StreamReader(response);
                    var strContent = reader.ReadToEnd();
                    Console.Write(strContent);
                }
                else {
                    using var writeStream = outputFile.OpenWrite();
                    await response.CopyToAsync(writeStream);
                    Console.WriteLine($"Content written to {outputFile.FullName}.");
                }
            });
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="global::LoggingApiClient.WithMmWithDdWithYy.WithPullZoneIdLog.WithPullZoneIdLogRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        public WithPullZoneIdLogRequestBuilder(Dictionary<string, object> pathParameters) : base("{+baseurl}/{mm}-{dd}-{yy}/{pullZoneId}.log?end={end}&order={order}&search={search}&start={start}&status={status}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::LoggingApiClient.WithMmWithDdWithYy.WithPullZoneIdLog.WithPullZoneIdLogRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public WithPullZoneIdLogRequestBuilder(string rawUrl) : base("{+baseurl}/{mm}-{dd}-{yy}/{pullZoneId}.log?end={end}&order={order}&search={search}&start={start}&status={status}", rawUrl)
        {
        }
        /// <summary>
        /// [LoggingApi API Docs](https://docs.bunny.net/docs/cdn-logging-api)
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::LoggingApiClient.WithMmWithDdWithYy.WithPullZoneIdLog.WithPullZoneIdLogRequestBuilder.WithPullZoneIdLogRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::LoggingApiClient.WithMmWithDdWithYy.WithPullZoneIdLog.WithPullZoneIdLogRequestBuilder.WithPullZoneIdLogRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/gzip");
            return requestInfo;
        }
        /// <summary>
        /// [LoggingApi API Docs](https://docs.bunny.net/docs/cdn-logging-api)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithPullZoneIdLogRequestBuilderGetQueryParameters 
        {
            [QueryParameter("end")]
            public long? End { get; set; }
            [QueryParameter("order")]
            public global::LoggingApiClient.WithMmWithDdWithYy.WithPullZoneIdLog.GetOrderQueryParameterType? Order { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("search")]
            public string? Search { get; set; }
#nullable restore
#else
            [QueryParameter("search")]
            public string Search { get; set; }
#endif
            [QueryParameter("start")]
            public long? Start { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("status")]
            public string? Status { get; set; }
#nullable restore
#else
            [QueryParameter("status")]
            public string Status { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
