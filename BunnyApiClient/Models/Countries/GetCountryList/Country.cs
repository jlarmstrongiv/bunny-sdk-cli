// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace BunnyApiClient.Models.Countries.GetCountryList
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    #pragma warning disable CS1591
    public partial class Country : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The FlagUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FlagUrl { get; set; }
#nullable restore
#else
        public string FlagUrl { get; set; }
#endif
        /// <summary>The IsEU property</summary>
        public bool? IsEU { get; set; }
        /// <summary>The IsoCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IsoCode { get; set; }
#nullable restore
#else
        public string IsoCode { get; set; }
#endif
        /// <summary>The Name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The PopList property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PopList { get; set; }
#nullable restore
#else
        public List<string> PopList { get; set; }
#endif
        /// <summary>The TaxPrefix property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaxPrefix { get; set; }
#nullable restore
#else
        public string TaxPrefix { get; set; }
#endif
        /// <summary>The TaxRate property</summary>
        public double? TaxRate { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::BunnyApiClient.Models.Countries.GetCountryList.Country"/> and sets the default values.
        /// </summary>
        public Country()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::BunnyApiClient.Models.Countries.GetCountryList.Country"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::BunnyApiClient.Models.Countries.GetCountryList.Country CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::BunnyApiClient.Models.Countries.GetCountryList.Country();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "FlagUrl", n => { FlagUrl = n.GetStringValue(); } },
                { "IsEU", n => { IsEU = n.GetBoolValue(); } },
                { "IsoCode", n => { IsoCode = n.GetStringValue(); } },
                { "Name", n => { Name = n.GetStringValue(); } },
                { "PopList", n => { PopList = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "TaxPrefix", n => { TaxPrefix = n.GetStringValue(); } },
                { "TaxRate", n => { TaxRate = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("FlagUrl", FlagUrl);
            writer.WriteBoolValue("IsEU", IsEU);
            writer.WriteStringValue("IsoCode", IsoCode);
            writer.WriteStringValue("Name", Name);
            writer.WriteCollectionOfPrimitiveValues<string>("PopList", PopList);
            writer.WriteStringValue("TaxPrefix", TaxPrefix);
            writer.WriteDoubleValue("TaxRate", TaxRate);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
