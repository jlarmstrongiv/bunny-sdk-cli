// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Cli.Commons.Extensions;
using Microsoft.Kiota.Cli.Commons.IO;
using Microsoft.Kiota.Cli.Commons;
using System.Collections.Generic;
using System.CommandLine;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace EdgeStorageApiClient.Item.Item.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \{storageZoneName}\{path}\{fileName}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    public partial class WithFileNameItemRequestBuilder : BaseCliRequestBuilder
    {
        /// <summary>
        /// [DeleteFile API Docs](https://docs.bunny.net/reference/delete_-storagezonename-path-filename)
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeleteCommand()
        {
            var command = new Command("delete");
            command.Description = "[DeleteFile API Docs](https://docs.bunny.net/reference/delete_-storagezonename-path-filename)";
            var storageZoneNameOption = new Option<string>("--storage-zone-name", description: "The name of your storage zone where you are connecting to.") {
            };
            storageZoneNameOption.IsRequired = true;
            command.AddOption(storageZoneNameOption);
            var pathOption = new Option<string>("--path", description: "The directory path to your file. If this is the root of your storage zone, you can ignore this parameter.") {
            };
            pathOption.IsRequired = true;
            command.AddOption(pathOption);
            var fileNameOption = new Option<string>("--file-name", description: "The name of the file that you wish to delete.") {
            };
            fileNameOption.IsRequired = true;
            command.AddOption(fileNameOption);
            var outputFileOption = new Option<FileInfo>("--output-file");
            command.AddOption(outputFileOption);
            command.SetHandler(async (invocationContext) => {
                var storageZoneName = invocationContext.ParseResult.GetValueForOption(storageZoneNameOption);
                var path = invocationContext.ParseResult.GetValueForOption(pathOption);
                var fileName = invocationContext.ParseResult.GetValueForOption(fileNameOption);
                var outputFile = invocationContext.ParseResult.GetValueForOption(outputFileOption);
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToDeleteRequestInformation(q => {
                });
                if (storageZoneName is not null) requestInfo.PathParameters.Add("storageZoneName", storageZoneName);
                if (path is not null) requestInfo.PathParameters.Add("path", path);
                if (fileName is not null) requestInfo.PathParameters.Add("fileName", fileName);
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: default, cancellationToken: cancellationToken) ?? Stream.Null;
                if (outputFile == null) {
                    using var reader = new StreamReader(response);
                    var strContent = reader.ReadToEnd();
                    Console.Write(strContent);
                }
                else {
                    using var writeStream = outputFile.OpenWrite();
                    await response.CopyToAsync(writeStream);
                    Console.WriteLine($"Content written to {outputFile.FullName}.");
                }
            });
            return command;
        }
        /// <summary>
        /// [DownloadFile API Docs](https://docs.bunny.net/reference/get_-storagezonename-path-filename)
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetCommand()
        {
            var command = new Command("get");
            command.Description = "[DownloadFile API Docs](https://docs.bunny.net/reference/get_-storagezonename-path-filename)";
            var storageZoneNameOption = new Option<string>("--storage-zone-name", description: "The name of your storage zone where you are connecting to.") {
            };
            storageZoneNameOption.IsRequired = true;
            command.AddOption(storageZoneNameOption);
            var pathOption = new Option<string>("--path", description: "The directory path to your file. If this is the root of your storage zone, you can ignore this parameter.") {
            };
            pathOption.IsRequired = true;
            command.AddOption(pathOption);
            var fileNameOption = new Option<string>("--file-name", description: "The name of the file that you wish to download.") {
            };
            fileNameOption.IsRequired = true;
            command.AddOption(fileNameOption);
            var outputFileOption = new Option<FileInfo>("--output-file");
            command.AddOption(outputFileOption);
            command.SetHandler(async (invocationContext) => {
                var storageZoneName = invocationContext.ParseResult.GetValueForOption(storageZoneNameOption);
                var path = invocationContext.ParseResult.GetValueForOption(pathOption);
                var fileName = invocationContext.ParseResult.GetValueForOption(fileNameOption);
                var outputFile = invocationContext.ParseResult.GetValueForOption(outputFileOption);
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToGetRequestInformation(q => {
                });
                if (storageZoneName is not null) requestInfo.PathParameters.Add("storageZoneName", storageZoneName);
                if (path is not null) requestInfo.PathParameters.Add("path", path);
                if (fileName is not null) requestInfo.PathParameters.Add("fileName", fileName);
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: default, cancellationToken: cancellationToken) ?? Stream.Null;
                if (outputFile == null) {
                    using var reader = new StreamReader(response);
                    var strContent = reader.ReadToEnd();
                    Console.Write(strContent);
                }
                else {
                    using var writeStream = outputFile.OpenWrite();
                    await response.CopyToAsync(writeStream);
                    Console.WriteLine($"Content written to {outputFile.FullName}.");
                }
            });
            return command;
        }
        /// <summary>
        /// [UploadFile API Docs](https://docs.bunny.net/reference/put_-storagezonename-path-filename)
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPutCommand()
        {
            var command = new Command("put");
            command.Description = "[UploadFile API Docs](https://docs.bunny.net/reference/put_-storagezonename-path-filename)";
            var storageZoneNameOption = new Option<string>("--storage-zone-name", description: "The name of your storage zone where you are connecting to.") {
            };
            storageZoneNameOption.IsRequired = true;
            command.AddOption(storageZoneNameOption);
            var pathOption = new Option<string>("--path", description: "The directory path to where your file will be stored. If this is the root of your storage zone, you can ignore this parameter.") {
            };
            pathOption.IsRequired = true;
            command.AddOption(pathOption);
            var fileNameOption = new Option<string>("--file-name", description: "The name that the file will be uploaded as.") {
            };
            fileNameOption.IsRequired = true;
            command.AddOption(fileNameOption);
            var checksumOption = new Option<string[]>("--checksum", description: "Checksum hashes if used, must be in SHA256 HEX, and in uppercase.") {
                Arity = ArgumentArity.OneOrMore
            };
            checksumOption.IsRequired = true;
            command.AddOption(checksumOption);
            var inputFileOption = new Option<FileInfo>("--input-file", description: "Binary request body") {
            };
            inputFileOption.IsRequired = true;
            command.AddOption(inputFileOption);
            command.SetHandler(async (invocationContext) => {
                var storageZoneName = invocationContext.ParseResult.GetValueForOption(storageZoneNameOption);
                var path = invocationContext.ParseResult.GetValueForOption(pathOption);
                var fileName = invocationContext.ParseResult.GetValueForOption(fileNameOption);
                var checksum = invocationContext.ParseResult.GetValueForOption(checksumOption);
                var inputFile = invocationContext.ParseResult.GetValueForOption(inputFileOption);
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                if (inputFile is null || !inputFile.Exists) {
                    Console.Error.WriteLine("No available file to send.");
                    return;
                }
                using var stream = inputFile.OpenRead();
                var requestInfo = ToPutRequestInformation(stream, q => {
                });
                if (storageZoneName is not null) requestInfo.PathParameters.Add("storageZoneName", storageZoneName);
                if (path is not null) requestInfo.PathParameters.Add("path", path);
                if (fileName is not null) requestInfo.PathParameters.Add("fileName", fileName);
                if (checksum is not null) requestInfo.Headers.Add("checksum", checksum);
                await reqAdapter.SendNoContentAsync(requestInfo, errorMapping: default, cancellationToken: cancellationToken);
                Console.WriteLine("Success");
            });
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="global::EdgeStorageApiClient.Item.Item.Item.WithFileNameItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        public WithFileNameItemRequestBuilder(Dictionary<string, object> pathParameters) : base("{+baseurl}/{storageZoneName}/{path}/{fileName}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::EdgeStorageApiClient.Item.Item.Item.WithFileNameItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public WithFileNameItemRequestBuilder(string rawUrl) : base("{+baseurl}/{storageZoneName}/{path}/{fileName}", rawUrl)
        {
        }
        /// <summary>
        /// [DeleteFile API Docs](https://docs.bunny.net/reference/delete_-storagezonename-path-filename)
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// [DownloadFile API Docs](https://docs.bunny.net/reference/get_-storagezonename-path-filename)
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/octet-stream");
            return requestInfo;
        }
        /// <summary>
        /// [UploadFile API Docs](https://docs.bunny.net/reference/put_-storagezonename-path-filename)
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">Binary request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(Stream body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(Stream body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetStreamContent(body, "application/octet-stream");
            return requestInfo;
        }
    }
}
