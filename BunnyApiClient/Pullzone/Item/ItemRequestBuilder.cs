// <auto-generated/>
using BunnyApiClient.Models.PullZone;
using BunnyApiClient.Pullzone.Item.AddAllowedReferrer;
using BunnyApiClient.Pullzone.Item.AddBlockedIp;
using BunnyApiClient.Pullzone.Item.AddBlockedReferrer;
using BunnyApiClient.Pullzone.Item.AddCertificate;
using BunnyApiClient.Pullzone.Item.AddHostname;
using BunnyApiClient.Pullzone.Item.Edgerules;
using BunnyApiClient.Pullzone.Item.Optimizer;
using BunnyApiClient.Pullzone.Item.Originshield;
using BunnyApiClient.Pullzone.Item.PurgeCache;
using BunnyApiClient.Pullzone.Item.RemoveAllowedReferrer;
using BunnyApiClient.Pullzone.Item.RemoveBlockedIp;
using BunnyApiClient.Pullzone.Item.RemoveBlockedReferrer;
using BunnyApiClient.Pullzone.Item.RemoveCertificate;
using BunnyApiClient.Pullzone.Item.RemoveHostname;
using BunnyApiClient.Pullzone.Item.ResetSecurityKey;
using BunnyApiClient.Pullzone.Item.Safehop;
using BunnyApiClient.Pullzone.Item.SetForceSSL;
using BunnyApiClient.Pullzone.Item.Waf;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Cli.Commons.Extensions;
using Microsoft.Kiota.Cli.Commons.IO;
using Microsoft.Kiota.Cli.Commons;
using System.Collections.Generic;
using System.CommandLine;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace BunnyApiClient.Pullzone.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \pullzone\{-id}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    public partial class ItemRequestBuilder : BaseCliRequestBuilder
    {
        /// <summary>
        /// The addAllowedReferrer property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAddAllowedReferrerNavCommand()
        {
            var command = new Command("add-allowed-referrer");
            command.Description = "The addAllowedReferrer property";
            var builder = new global::BunnyApiClient.Pullzone.Item.AddAllowedReferrer.AddAllowedReferrerRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The addBlockedIp property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAddBlockedIpNavCommand()
        {
            var command = new Command("add-blocked-ip");
            command.Description = "The addBlockedIp property";
            var builder = new global::BunnyApiClient.Pullzone.Item.AddBlockedIp.AddBlockedIpRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The addBlockedReferrer property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAddBlockedReferrerNavCommand()
        {
            var command = new Command("add-blocked-referrer");
            command.Description = "The addBlockedReferrer property";
            var builder = new global::BunnyApiClient.Pullzone.Item.AddBlockedReferrer.AddBlockedReferrerRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The addCertificate property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAddCertificateNavCommand()
        {
            var command = new Command("add-certificate");
            command.Description = "The addCertificate property";
            var builder = new global::BunnyApiClient.Pullzone.Item.AddCertificate.AddCertificateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The addHostname property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAddHostnameNavCommand()
        {
            var command = new Command("add-hostname");
            command.Description = "The addHostname property";
            var builder = new global::BunnyApiClient.Pullzone.Item.AddHostname.AddHostnameRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// [DeletePullZone API Docs](https://docs.bunny.net/reference/pullzonepublic_delete)
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeleteCommand()
        {
            var command = new Command("delete");
            command.Description = "[DeletePullZone API Docs](https://docs.bunny.net/reference/pullzonepublic_delete)";
            var idOption = new Option<long?>("--id", description: "The ID of the Pull Zone that should be deleted") {
            };
            idOption.IsRequired = true;
            command.AddOption(idOption);
            command.SetHandler(async (invocationContext) => {
                var id = invocationContext.ParseResult.GetValueForOption(idOption);
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToDeleteRequestInformation(q => {
                });
                if (id is not null) requestInfo.PathParameters.Add("%2Did", id);
                await reqAdapter.SendNoContentAsync(requestInfo, errorMapping: default, cancellationToken: cancellationToken);
                Console.WriteLine("Success");
            });
            return command;
        }
        /// <summary>
        /// The edgerules property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildEdgerulesNavCommand()
        {
            var command = new Command("edgerules");
            command.Description = "The edgerules property";
            var builder = new global::BunnyApiClient.Pullzone.Item.Edgerules.EdgerulesRequestBuilder(PathParameters);
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAddOrUpdateNavCommand());
            var cmds = builder.BuildCommand();
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// [GetPullZone API Docs](https://docs.bunny.net/reference/pullzonepublic_index2)
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetCommand()
        {
            var command = new Command("get");
            command.Description = "[GetPullZone API Docs](https://docs.bunny.net/reference/pullzonepublic_index2)";
            var idOption = new Option<long?>("--id", description: "The ID of the Pull Zone that should be returned") {
            };
            idOption.IsRequired = true;
            command.AddOption(idOption);
            var includeCertificateOption = new Option<bool?>("--include-certificate", description: "Determines if the result hostnames should contain the SSL certificate") {
            };
            includeCertificateOption.IsRequired = true;
            command.AddOption(includeCertificateOption);
            var outputOption = new Option<FormatterType>("--output", () => FormatterType.JSON);
            command.AddOption(outputOption);
            var queryOption = new Option<string>("--query");
            command.AddOption(queryOption);
            command.SetHandler(async (invocationContext) => {
                var id = invocationContext.ParseResult.GetValueForOption(idOption);
                var includeCertificate = invocationContext.ParseResult.GetValueForOption(includeCertificateOption);
                var output = invocationContext.ParseResult.GetValueForOption(outputOption);
                var query = invocationContext.ParseResult.GetValueForOption(queryOption);
                IOutputFilter outputFilter = invocationContext.BindingContext.GetService(typeof(IOutputFilter)) as IOutputFilter ?? throw new ArgumentNullException("outputFilter");
                IOutputFormatterFactory outputFormatterFactory = invocationContext.BindingContext.GetService(typeof(IOutputFormatterFactory)) as IOutputFormatterFactory ?? throw new ArgumentNullException("outputFormatterFactory");
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToGetRequestInformation(q => {
                    q.QueryParameters.IncludeCertificate = includeCertificate;
                });
                if (id is not null) requestInfo.PathParameters.Add("%2Did", id);
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: default, cancellationToken: cancellationToken) ?? Stream.Null;
                response = (response != Stream.Null) ? await outputFilter.FilterOutputAsync(response, query, cancellationToken) : response;
                var formatter = outputFormatterFactory.GetFormatter(output);
                await formatter.WriteOutputAsync(response, cancellationToken);
            });
            return command;
        }
        /// <summary>
        /// The optimizer property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildOptimizerNavCommand()
        {
            var command = new Command("optimizer");
            command.Description = "The optimizer property";
            var builder = new global::BunnyApiClient.Pullzone.Item.Optimizer.OptimizerRequestBuilder(PathParameters);
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildStatisticsNavCommand());
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The originshield property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildOriginshieldNavCommand()
        {
            var command = new Command("originshield");
            command.Description = "The originshield property";
            var builder = new global::BunnyApiClient.Pullzone.Item.Originshield.OriginshieldRequestBuilder(PathParameters);
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildQueuestatisticsNavCommand());
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// [UpdatePullZone API Docs](https://docs.bunny.net/reference/pullzonepublic_updatepullzone)
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPostCommand()
        {
            var command = new Command("post");
            command.Description = "[UpdatePullZone API Docs](https://docs.bunny.net/reference/pullzonepublic_updatepullzone)";
            var idOption = new Option<long?>("--id", description: "The ID of the Pull Zone that should be updated") {
            };
            idOption.IsRequired = true;
            command.AddOption(idOption);
            var bodyOption = new Option<string>("--body", description: "The request body") {
            };
            bodyOption.IsRequired = true;
            command.AddOption(bodyOption);
            var outputOption = new Option<FormatterType>("--output", () => FormatterType.JSON);
            command.AddOption(outputOption);
            var queryOption = new Option<string>("--query");
            command.AddOption(queryOption);
            command.SetHandler(async (invocationContext) => {
                var id = invocationContext.ParseResult.GetValueForOption(idOption);
                var body = invocationContext.ParseResult.GetValueForOption(bodyOption) ?? string.Empty;
                var output = invocationContext.ParseResult.GetValueForOption(outputOption);
                var query = invocationContext.ParseResult.GetValueForOption(queryOption);
                IOutputFilter outputFilter = invocationContext.BindingContext.GetService(typeof(IOutputFilter)) as IOutputFilter ?? throw new ArgumentNullException("outputFilter");
                IOutputFormatterFactory outputFormatterFactory = invocationContext.BindingContext.GetService(typeof(IOutputFormatterFactory)) as IOutputFormatterFactory ?? throw new ArgumentNullException("outputFormatterFactory");
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                using var stream = new MemoryStream(Encoding.UTF8.GetBytes(body));
                var parseNode = ParseNodeFactoryRegistry.DefaultInstance.GetRootParseNode("application/json", stream);
                var model = parseNode.GetObjectValue<global::BunnyApiClient.Models.PullZone.PullZoneCreate>(global::BunnyApiClient.Models.PullZone.PullZoneCreate.CreateFromDiscriminatorValue);
                if (model is null) {
                    Console.Error.WriteLine("No model data to send.");
                    return;
                }
                var requestInfo = ToPostRequestInformation(model, q => {
                });
                if (id is not null) requestInfo.PathParameters.Add("%2Did", id);
                requestInfo.SetContentFromParsable(reqAdapter, "application/json", model);
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: default, cancellationToken: cancellationToken) ?? Stream.Null;
                response = (response != Stream.Null) ? await outputFilter.FilterOutputAsync(response, query, cancellationToken) : response;
                var formatter = outputFormatterFactory.GetFormatter(output);
                await formatter.WriteOutputAsync(response, cancellationToken);
            });
            return command;
        }
        /// <summary>
        /// The purgeCache property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPurgeCacheNavCommand()
        {
            var command = new Command("purge-cache");
            command.Description = "The purgeCache property";
            var builder = new global::BunnyApiClient.Pullzone.Item.PurgeCache.PurgeCacheRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The removeAllowedReferrer property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRemoveAllowedReferrerNavCommand()
        {
            var command = new Command("remove-allowed-referrer");
            command.Description = "The removeAllowedReferrer property";
            var builder = new global::BunnyApiClient.Pullzone.Item.RemoveAllowedReferrer.RemoveAllowedReferrerRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The removeBlockedIp property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRemoveBlockedIpNavCommand()
        {
            var command = new Command("remove-blocked-ip");
            command.Description = "The removeBlockedIp property";
            var builder = new global::BunnyApiClient.Pullzone.Item.RemoveBlockedIp.RemoveBlockedIpRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The removeBlockedReferrer property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRemoveBlockedReferrerNavCommand()
        {
            var command = new Command("remove-blocked-referrer");
            command.Description = "The removeBlockedReferrer property";
            var builder = new global::BunnyApiClient.Pullzone.Item.RemoveBlockedReferrer.RemoveBlockedReferrerRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The removeCertificate property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRemoveCertificateNavCommand()
        {
            var command = new Command("remove-certificate");
            command.Description = "The removeCertificate property";
            var builder = new global::BunnyApiClient.Pullzone.Item.RemoveCertificate.RemoveCertificateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The removeHostname property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRemoveHostnameNavCommand()
        {
            var command = new Command("remove-hostname");
            command.Description = "The removeHostname property";
            var builder = new global::BunnyApiClient.Pullzone.Item.RemoveHostname.RemoveHostnameRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildDeleteCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The resetSecurityKey property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildResetSecurityKeyNavCommand()
        {
            var command = new Command("reset-security-key");
            command.Description = "The resetSecurityKey property";
            var builder = new global::BunnyApiClient.Pullzone.Item.ResetSecurityKey.ResetSecurityKeyRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The safehop property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSafehopNavCommand()
        {
            var command = new Command("safehop");
            command.Description = "The safehop property";
            var builder = new global::BunnyApiClient.Pullzone.Item.Safehop.SafehopRequestBuilder(PathParameters);
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildStatisticsNavCommand());
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The setForceSSL property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSetForceSSLNavCommand()
        {
            var command = new Command("set-force-s-s-l");
            command.Description = "The setForceSSL property";
            var builder = new global::BunnyApiClient.Pullzone.Item.SetForceSSL.SetForceSSLRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The waf property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildWafNavCommand()
        {
            var command = new Command("waf");
            command.Description = "The waf property";
            var builder = new global::BunnyApiClient.Pullzone.Item.Waf.WafRequestBuilder(PathParameters);
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildStatisticsNavCommand());
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BunnyApiClient.Pullzone.Item.ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        public ItemRequestBuilder(Dictionary<string, object> pathParameters) : base("{+baseurl}/pullzone/{%2Did}?includeCertificate={includeCertificate}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BunnyApiClient.Pullzone.Item.ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public ItemRequestBuilder(string rawUrl) : base("{+baseurl}/pullzone/{%2Did}?includeCertificate={includeCertificate}", rawUrl)
        {
        }
        /// <summary>
        /// [DeletePullZone API Docs](https://docs.bunny.net/reference/pullzonepublic_delete)
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, "{+baseurl}/pullzone/{%2Did}", PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// [GetPullZone API Docs](https://docs.bunny.net/reference/pullzonepublic_index2)
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::BunnyApiClient.Pullzone.Item.ItemRequestBuilder.ItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::BunnyApiClient.Pullzone.Item.ItemRequestBuilder.ItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// [UpdatePullZone API Docs](https://docs.bunny.net/reference/pullzonepublic_updatepullzone)
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::BunnyApiClient.Models.PullZone.PullZoneCreate body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::BunnyApiClient.Models.PullZone.PullZoneCreate body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, "{+baseurl}/pullzone/{%2Did}", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// [GetPullZone API Docs](https://docs.bunny.net/reference/pullzonepublic_index2)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
        public partial class ItemRequestBuilderGetQueryParameters 
        {
            /// <summary>Determines if the result hostnames should contain the SSL certificate</summary>
            [QueryParameter("includeCertificate")]
            public bool? IncludeCertificate { get; set; }
        }
    }
}
