// <auto-generated/>
#pragma warning disable CS0618
using BunnyApiClient.Shield.Metrics;
using BunnyApiClient.Shield.RateLimit;
using BunnyApiClient.Shield.RateLimits;
using BunnyApiClient.Shield.ShieldZone;
using BunnyApiClient.Shield.ShieldZones;
using BunnyApiClient.Shield.Waf;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Cli.Commons.IO;
using Microsoft.Kiota.Cli.Commons;
using System.Collections.Generic;
using System.CommandLine;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using System;
namespace BunnyApiClient.Shield
{
    /// <summary>
    /// Builds and executes requests for operations under \shield
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ShieldRequestBuilder : BaseCliRequestBuilder
    {
        /// <summary>
        /// The metrics property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMetricsNavCommand()
        {
            var command = new Command("metrics");
            command.Description = "The metrics property";
            var builder = new global::BunnyApiClient.Shield.Metrics.MetricsRequestBuilder(PathParameters);
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildWafNavCommand());
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The rateLimit property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRateLimitNavCommand()
        {
            var command = new Command("rate-limit");
            command.Description = "The rateLimit property";
            var builder = new global::BunnyApiClient.Shield.RateLimit.RateLimitRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildCreateCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The rateLimits property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRateLimitsNavCommand()
        {
            var command = new Command("rate-limits");
            command.Description = "The rateLimits property";
            var builder = new global::BunnyApiClient.Shield.RateLimits.RateLimitsRequestBuilder(PathParameters);
            var nonExecCommands = new List<Command>();
            var cmds = builder.BuildCommand();
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The shieldZone property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildShieldZoneNavCommand()
        {
            var command = new Command("shield-zone");
            command.Description = "The shieldZone property";
            var builder = new global::BunnyApiClient.Shield.ShieldZone.ShieldZoneRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            execCommands.Add(builder.BuildCreateCommand());
            nonExecCommands.Add(builder.BuildGetByPullzoneNavCommand());
            execCommands.Add(builder.BuildPatchCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The shieldZones property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildShieldZonesNavCommand()
        {
            var command = new Command("shield-zones");
            command.Description = "The shieldZones property";
            var builder = new global::BunnyApiClient.Shield.ShieldZones.ShieldZonesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// The waf property
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildWafNavCommand()
        {
            var command = new Command("waf");
            command.Description = "The waf property";
            var builder = new global::BunnyApiClient.Shield.Waf.WafRequestBuilder(PathParameters);
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCustomRuleNavCommand());
            nonExecCommands.Add(builder.BuildCustomRulesNavCommand());
            nonExecCommands.Add(builder.BuildEngineConfigNavCommand());
            nonExecCommands.Add(builder.BuildEnumsNavCommand());
            nonExecCommands.Add(builder.BuildProfilesNavCommand());
            nonExecCommands.Add(builder.BuildRulesNavCommand());
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BunnyApiClient.Shield.ShieldRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        public ShieldRequestBuilder(Dictionary<string, object> pathParameters) : base("{+baseurl}/shield", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BunnyApiClient.Shield.ShieldRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public ShieldRequestBuilder(string rawUrl) : base("{+baseurl}/shield", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618
