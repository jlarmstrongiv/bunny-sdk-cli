// <auto-generated/>
using BunnyApiClient.Models.PullZone.EdgeRule;
using BunnyApiClient.Models.PullZone.Optimizer;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace BunnyApiClient.Models.PullZone
{
    #pragma warning disable CS1591
    public class PullZone : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The list of extensions that will return the CORS headers</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AccessControlOriginHeaderExtensions { get; set; }
#nullable restore
#else
        public List<string> AccessControlOriginHeaderExtensions { get; set; }
#endif
        /// <summary>Determines if the Add Canonical Header is enabled for this Pull Zone</summary>
        public bool? AddCanonicalHeader { get; set; }
        /// <summary>Determines if the Pull Zone should forward the current hostname to the origin</summary>
        public bool? AddHostHeader { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The Pull Zone specific pricing discount for Africa region.</summary>
        public int? AfricaDiscount { get; private set; }
        /// <summary>The list of referrer hostnames that are allowed to access the pull zone.Requests containing the header Referer: hostname that is not on the list will be rejected.If empty, all the referrers are allowed</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AllowedReferrers { get; set; }
#nullable restore
#else
        public List<string> AllowedReferrers { get; set; }
#endif
        /// <summary>The Pull Zone specific pricing discount for Asia &amp; Oceania region.</summary>
        public int? AsiaOceaniaDiscount { get; private set; }
        /// <summary>Determines if the AWS Signing is enabled</summary>
        public bool? AWSSigningEnabled { get; set; }
        /// <summary>The AWS Signing region key</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AWSSigningKey { get; set; }
#nullable restore
#else
        public string AWSSigningKey { get; set; }
#endif
        /// <summary>The AWS Signing region name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AWSSigningRegionName { get; set; }
#nullable restore
#else
        public string AWSSigningRegionName { get; set; }
#endif
        /// <summary>The AWS Signing region secret</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AWSSigningSecret { get; set; }
#nullable restore
#else
        public string AWSSigningSecret { get; set; }
#endif
        /// <summary>The list of blocked countries with the two-letter Alpha2 ISO codes</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? BlockedCountries { get; set; }
#nullable restore
#else
        public List<string> BlockedCountries { get; set; }
#endif
        /// <summary>The list of IPs that are blocked from accessing the pull zone. Requests coming from the following IPs will be rejected. If empty, all the IPs will be allowed</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? BlockedIps { get; set; }
#nullable restore
#else
        public List<string> BlockedIps { get; set; }
#endif
        /// <summary>The list of referrer hostnames that are not allowed to access the pull zone. Requests containing the header Referer: hostname that is on the list will be rejected. If empty, all the referrers are allowed</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? BlockedReferrers { get; set; }
#nullable restore
#else
        public List<string> BlockedReferrers { get; set; }
#endif
        /// <summary>The BlockNoneReferrer property</summary>
        public bool? BlockNoneReferrer { get; set; }
        /// <summary>If true, POST requests to the zone will be blocked</summary>
        public bool? BlockPostRequests { get; set; }
        /// <summary>If true, access to root path will return a 403 error</summary>
        public bool? BlockRootPathAccess { get; set; }
        /// <summary>The list of budget redirected countries with the two-letter Alpha2 ISO codes</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? BudgetRedirectedCountries { get; set; }
#nullable restore
#else
        public List<string> BudgetRedirectedCountries { get; set; }
#endif
        /// <summary>The BunnyAiImageBlueprints property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::BunnyApiClient.Models.PullZone.BunnyAiImageBlueprint>? BunnyAiImageBlueprints { get; set; }
#nullable restore
#else
        public List<global::BunnyApiClient.Models.PullZone.BunnyAiImageBlueprint> BunnyAiImageBlueprints { get; set; }
#endif
        /// <summary>Excessive requests are delayed until their number exceeds the maximum burst size.</summary>
        public int? BurstSize { get; set; }
        /// <summary>The override cache time for the pull zone</summary>
        public long? CacheControlMaxAgeOverride { get; set; }
        /// <summary>The override cache time for the pull zone for the end client</summary>
        public long? CacheControlPublicMaxAgeOverride { get; set; }
        /// <summary>Determines if bunny.net should be caching error responses</summary>
        public bool? CacheErrorResponses { get; set; }
        /// <summary>The CacheVersion property</summary>
        public double? CacheVersion { get; private set; }
        /// <summary>The CNAME domain of the pull zone for setting up custom hostnames</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CnameDomain { get; private set; }
#nullable restore
#else
        public string CnameDomain { get; private set; }
#endif
        /// <summary>The number of connections limited per IP for this zone</summary>
        public int? ConnectionLimitPerIPCount { get; set; }
        /// <summary>Contains the list of vary parameters that will be used for vary cache by cookie string. If empty, cookie vary will not be used.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? CookieVaryParameters { get; set; }
#nullable restore
#else
        public List<string> CookieVaryParameters { get; set; }
#endif
        /// <summary>Determines if the cookies are disabled for the pull zone</summary>
        public bool? DisableCookies { get; set; }
        /// <summary>If true, the built-in let&apos;s encrypt is disabled and requests are passed to the origin.</summary>
        public bool? DisableLetsEncrypt { get; set; }
        /// <summary>The ID of the DNS record tied to this pull zone</summary>
        public long? DnsRecordId { get; private set; }
        /// <summary>The cached version of the DNS record value</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DnsRecordValue { get; private set; }
#nullable restore
#else
        public string DnsRecordValue { get; private set; }
#endif
        /// <summary>The ID of the DNS zone tied to this pull zone</summary>
        public long? DnsZoneId { get; private set; }
        /// <summary>The list of edge rules on this Pull Zone</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::BunnyApiClient.Models.PullZone.EdgeRule.EdgeRule>? EdgeRules { get; set; }
#nullable restore
#else
        public List<global::BunnyApiClient.Models.PullZone.EdgeRule.EdgeRule> EdgeRules { get; set; }
#endif
        /// <summary>The EdgeScriptExecutionPhase property</summary>
        public double? EdgeScriptExecutionPhase { get; set; }
        /// <summary>The ID of the edge script that the pull zone is linked to</summary>
        public long? EdgeScriptId { get; set; }
        /// <summary>Determines if the CORS headers should be enabled</summary>
        public bool? EnableAccessControlOriginHeader { get; set; }
        /// <summary>If set to true, any hostnames added to this Pull Zone will automatically enable SSL.</summary>
        public bool? EnableAutoSSL { get; set; }
        /// <summary>Determines if the AVIF Vary feature is enabled.</summary>
        public bool? EnableAvifVary { get; set; }
        /// <summary>The EnableBunnyImageAi property</summary>
        public bool? EnableBunnyImageAi { get; set; }
        /// <summary>Determines if the cache slice (Optimize for video) feature is enabled for the Pull Zone</summary>
        public bool? EnableCacheSlice { get; set; }
        /// <summary>Determines if the Cookie Vary feature is enabled.</summary>
        public bool? EnableCookieVary { get; set; }
        /// <summary>Determines if the Country Code Vary feature is enabled.</summary>
        public bool? EnableCountryCodeVary { get; set; }
        /// <summary>Determines if the Pull Zone is currently enabled, active and running</summary>
        public bool? Enabled { get; private set; }
        /// <summary>Determines if the delivery from the Africa region is enabled for this pull zone</summary>
        public bool? EnableGeoZoneAF { get; set; }
        /// <summary>Determines if the delivery from the Asian / Oceanian region is enabled for this pull zone</summary>
        public bool? EnableGeoZoneASIA { get; set; }
        /// <summary>Determines if the delivery from the European region is enabled for this pull zone</summary>
        public bool? EnableGeoZoneEU { get; set; }
        /// <summary>Determines if the delivery from the South American region is enabled for this pull zone</summary>
        public bool? EnableGeoZoneSA { get; set; }
        /// <summary>Determines if the delivery from the North American region is enabled for this pull zone</summary>
        public bool? EnableGeoZoneUS { get; set; }
        /// <summary>Determines if the Hostname Vary feature is enabled.</summary>
        public bool? EnableHostnameVary { get; set; }
        /// <summary>Determines if the logging is enabled for this Pull Zone</summary>
        public bool? EnableLogging { get; set; }
        /// <summary>Determines if the Mobile Vary feature is enabled.</summary>
        public bool? EnableMobileVary { get; set; }
        /// <summary>If true the server will use the origin shield feature</summary>
        public bool? EnableOriginShield { get; set; }
        /// <summary>If set to true the query string ordering property is enabled.</summary>
        public bool? EnableQueryStringOrdering { get; set; }
        /// <summary>Determines if request coalescing is currently enabled.</summary>
        public bool? EnableRequestCoalescing { get; set; }
        /// <summary>The EnableSafeHop property</summary>
        public bool? EnableSafeHop { get; set; }
        /// <summary>Determines if smart caching is enabled for this zone</summary>
        public bool? EnableSmartCache { get; set; }
        /// <summary>Determines if the TLS 1 is enabled on the Pull Zone</summary>
        public bool? EnableTLS1 { get; set; }
        /// <summary>Determines if the TLS 1.1 is enabled on the Pull Zone</summary>
        public bool? EnableTLS11 { get; set; }
        /// <summary>Determines if the WebP Vary feature is enabled.</summary>
        public bool? EnableWebPVary { get; set; }
        /// <summary>Contains the custom error page code that will be returned</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ErrorPageCustomCode { get; set; }
#nullable restore
#else
        public string ErrorPageCustomCode { get; set; }
#endif
        /// <summary>Determines if custom error page code should be enabled.</summary>
        public bool? ErrorPageEnableCustomCode { get; set; }
        /// <summary>Determines if the statuspage widget should be displayed on the error pages</summary>
        public bool? ErrorPageEnableStatuspageWidget { get; set; }
        /// <summary>The statuspage code that will be used to build the status widget</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ErrorPageStatuspageCode { get; set; }
#nullable restore
#else
        public string ErrorPageStatuspageCode { get; set; }
#endif
        /// <summary>Determines if the error pages should be whitelabel or not</summary>
        public bool? ErrorPageWhitelabel { get; set; }
        /// <summary>The Pull Zone specific pricing discount for EU and US region.</summary>
        public int? EUUSDiscount { get; private set; }
        /// <summary>Determines if the zone will follow origin redirects</summary>
        public bool? FollowRedirects { get; set; }
        /// <summary>The list of hostnames linked to this Pull Zone</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::BunnyApiClient.Models.PullZone.Hostname>? Hostnames { get; private set; }
#nullable restore
#else
        public List<global::BunnyApiClient.Models.PullZone.Hostname> Hostnames { get; private set; }
#endif
        /// <summary>The unique ID of the pull zone.</summary>
        public long? Id { get; private set; }
        /// <summary>True if the Pull Zone is ignoring query strings when serving cached objects</summary>
        public bool? IgnoreQueryStrings { get; set; }
        /// <summary>The amount of data after the rate limit will be activated</summary>
        public double? LimitRateAfter { get; set; }
        /// <summary>The maximum rate at which the zone will transfer data in kb/s. 0 for unlimited</summary>
        public double? LimitRatePerSecond { get; set; }
        /// <summary>The LogAnonymizationType property</summary>
        public double? LogAnonymizationType { get; set; }
        /// <summary>The LogFormat property</summary>
        public double? LogFormat { get; set; }
        /// <summary>Determines if the log forwarding is enabled</summary>
        public bool? LogForwardingEnabled { get; set; }
        /// <summary>The LogForwardingFormat property</summary>
        public double? LogForwardingFormat { get; set; }
        /// <summary>The log forwarding hostname</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LogForwardingHostname { get; set; }
#nullable restore
#else
        public string LogForwardingHostname { get; set; }
#endif
        /// <summary>The log forwarding port</summary>
        public int? LogForwardingPort { get; set; }
        /// <summary>The LogForwardingProtocol property</summary>
        public double? LogForwardingProtocol { get; set; }
        /// <summary>The log forwarding token value</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LogForwardingToken { get; set; }
#nullable restore
#else
        public string LogForwardingToken { get; set; }
#endif
        /// <summary>Determines if the log anonymization should be enabled</summary>
        public bool? LoggingIPAnonymizationEnabled { get; set; }
        /// <summary>Determines if the permanent logging feature is enabled</summary>
        public bool? LoggingSaveToStorage { get; set; }
        /// <summary>The ID of the logging storage zone that is configured for this Pull Zone</summary>
        public long? LoggingStorageZoneId { get; set; }
        /// <summary>The MagicContainersAppId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MagicContainersAppId { get; set; }
#nullable restore
#else
        public string MagicContainersAppId { get; set; }
#endif
        /// <summary>The MagicContainersEndpointId property</summary>
        public long? MagicContainersEndpointId { get; set; }
        /// <summary>The MiddlewareScriptId property</summary>
        public long? MiddlewareScriptId { get; set; }
        /// <summary>The monthly limit of bandwidth in bytes that the pullzone is allowed to use</summary>
        public long? MonthlyBandwidthLimit { get; set; }
        /// <summary>The amount of bandwidth in bytes that the pull zone used this month</summary>
        public long? MonthlyBandwidthUsed { get; private set; }
        /// <summary>The total monthly charges for this so zone so far</summary>
        public double? MonthlyCharges { get; set; }
        /// <summary>The name of the pull zone.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Determines if the automatic image optimization should be enabled</summary>
        public bool? OptimizerAutomaticOptimizationEnabled { get; set; }
        /// <summary>Contains the list of optimizer classes</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::BunnyApiClient.Models.PullZone.Optimizer.OptimizerClass>? OptimizerClasses { get; set; }
#nullable restore
#else
        public List<global::BunnyApiClient.Models.PullZone.Optimizer.OptimizerClass> OptimizerClasses { get; set; }
#endif
        /// <summary>Determines the maximum automatic image size for desktop clients</summary>
        public int? OptimizerDesktopMaxWidth { get; set; }
        /// <summary>Determines if the optimizer should be enabled for this zone</summary>
        public bool? OptimizerEnabled { get; set; }
        /// <summary>Determines the image manipulation should be enabled</summary>
        public bool? OptimizerEnableManipulationEngine { get; set; }
        /// <summary>Determines if the WebP optimization should be enabled</summary>
        public bool? OptimizerEnableWebP { get; set; }
        /// <summary>Determines if the optimizer class list should be enforced</summary>
        public bool? OptimizerForceClasses { get; set; }
        /// <summary>Determines the image quality for desktop clients</summary>
        public int? OptimizerImageQuality { get; set; }
        /// <summary>Determines if the CSS minification should be enabled</summary>
        public bool? OptimizerMinifyCSS { get; set; }
        /// <summary>Determines if the JavaScript minification should be enabled</summary>
        public bool? OptimizerMinifyJavaScript { get; set; }
        /// <summary>Determines the image quality for mobile clients</summary>
        public int? OptimizerMobileImageQuality { get; set; }
        /// <summary>Determines the maximum automatic image size for mobile clients</summary>
        public int? OptimizerMobileMaxWidth { get; set; }
        /// <summary>The OptimizerStaticHtmlEnabled property</summary>
        public bool? OptimizerStaticHtmlEnabled { get; set; }
        /// <summary>The OptimizerStaticHtmlWordPressBypassCookie property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OptimizerStaticHtmlWordPressBypassCookie { get; set; }
#nullable restore
#else
        public string OptimizerStaticHtmlWordPressBypassCookie { get; set; }
#endif
        /// <summary>The OptimizerStaticHtmlWordPressPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OptimizerStaticHtmlWordPressPath { get; set; }
#nullable restore
#else
        public string OptimizerStaticHtmlWordPressPath { get; set; }
#endif
        /// <summary>Determines if image watermarking should be enabled</summary>
        public bool? OptimizerWatermarkEnabled { get; set; }
        /// <summary>Sets the minimum image size to which the watermark will be added</summary>
        public int? OptimizerWatermarkMinImageSize { get; set; }
        /// <summary>Sets the offset of the watermark image</summary>
        public double? OptimizerWatermarkOffset { get; set; }
        /// <summary>The OptimizerWatermarkPosition property</summary>
        public double? OptimizerWatermarkPosition { get; set; }
        /// <summary>Sets the URL of the watermark image</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OptimizerWatermarkUrl { get; set; }
#nullable restore
#else
        public string OptimizerWatermarkUrl { get; set; }
#endif
        /// <summary>The amount of seconds to wait when connecting to the origin. Otherwise the request will fail or retry.</summary>
        public int? OriginConnectTimeout { get; set; }
        /// <summary>Determines the host header that will be sent to the origin</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginHostHeader { get; set; }
#nullable restore
#else
        public string OriginHostHeader { get; set; }
#endif
        /// <summary>Returns the link short preview value for the pull zone origin connection.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginLinkValue { get; private set; }
#nullable restore
#else
        public string OriginLinkValue { get; private set; }
#endif
        /// <summary>The amount of seconds to wait when waiting for the origin reply. Otherwise the request will fail or retry.</summary>
        public int? OriginResponseTimeout { get; set; }
        /// <summary>The number of retries to the origin server</summary>
        public int? OriginRetries { get; set; }
        /// <summary>Determines if we should retry the request in case of a 5XX response.</summary>
        public bool? OriginRetry5XXResponses { get; set; }
        /// <summary>Determines if we should retry the request in case of a connection timeout.</summary>
        public bool? OriginRetryConnectionTimeout { get; set; }
        /// <summary>Determines the amount of time that the CDN should wait before retrying an origin request.</summary>
        public int? OriginRetryDelay { get; set; }
        /// <summary>Determines if we should retry the request in case of a response timeout.</summary>
        public bool? OriginRetryResponseTimeout { get; set; }
        /// <summary>Determines if the origin shield concurrency limit is enabled.</summary>
        public bool? OriginShieldEnableConcurrencyLimit { get; set; }
        /// <summary>Determines the number of maximum concurrent requests allowed to the origin.</summary>
        public int? OriginShieldMaxConcurrentRequests { get; set; }
        /// <summary>Determines the max number of origin requests that will remain in the queue</summary>
        public int? OriginShieldMaxQueuedRequests { get; set; }
        /// <summary>Determines the max queue wait time</summary>
        public int? OriginShieldQueueMaxWaitTime { get; set; }
        /// <summary>The zone code of the origin shield</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginShieldZoneCode { get; set; }
#nullable restore
#else
        public string OriginShieldZoneCode { get; set; }
#endif
        /// <summary>The OriginType property</summary>
        public double? OriginType { get; set; }
        /// <summary>The origin URL of the pull zone where the files are fetched from.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginUrl { get; set; }
#nullable restore
#else
        public string OriginUrl { get; set; }
#endif
        /// <summary>The IP of the storage zone used for Perma-Cache</summary>
        public long? PermaCacheStorageZoneId { get; set; }
        /// <summary>The PermaCacheType property</summary>
        public long? PermaCacheType { get; set; }
        /// <summary>The custom preloading screen code</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreloadingScreenCode { get; set; }
#nullable restore
#else
        public string PreloadingScreenCode { get; set; }
#endif
        /// <summary>Determines if the custom preloader screen is enabled</summary>
        public bool? PreloadingScreenCodeEnabled { get; set; }
        /// <summary>The delay in milliseconds after which the preloading screen will be displayed</summary>
        public int? PreloadingScreenDelay { get; set; }
        /// <summary>Determines if the preloading screen is currently enabled</summary>
        public bool? PreloadingScreenEnabled { get; set; }
        /// <summary>The preloading screen logo URL</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreloadingScreenLogoUrl { get; set; }
#nullable restore
#else
        public string PreloadingScreenLogoUrl { get; set; }
#endif
        /// <summary>The PreloadingScreenShowOnFirstVisit property</summary>
        public bool? PreloadingScreenShowOnFirstVisit { get; set; }
        /// <summary>The PreloadingScreenTheme property</summary>
        public double? PreloadingScreenTheme { get; set; }
        /// <summary>The custom price override for this zone</summary>
        public double? PriceOverride { get; private set; }
        /// <summary>Contains the list of vary parameters that will be used for vary cache by query string. If empty, all parameters will be used to construct the key</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? QueryStringVaryParameters { get; set; }
#nullable restore
#else
        public List<string> QueryStringVaryParameters { get; set; }
#endif
        /// <summary>Determines the lock time for coalesced requests.</summary>
        public int? RequestCoalescingTimeout { get; set; }
        /// <summary>Max number of requests per IP per second</summary>
        public int? RequestLimit { get; set; }
        /// <summary>The list of routing filters enabled for this zone</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::BunnyApiClient.Models.PullZone.PullZone_RoutingFilters?>? RoutingFilters { get; set; }
#nullable restore
#else
        public List<global::BunnyApiClient.Models.PullZone.PullZone_RoutingFilters?> RoutingFilters { get; set; }
#endif
        /// <summary>The ShieldDDosProtectionEnabled property</summary>
        public bool? ShieldDDosProtectionEnabled { get; set; }
        /// <summary>The ShieldDDosProtectionType property</summary>
        public double? ShieldDDosProtectionType { get; set; }
        /// <summary>The Pull Zone specific pricing discount for South America region.</summary>
        public int? SouthAmericaDiscount { get; private set; }
        /// <summary>The ID of the storage zone that the pull zone is linked to</summary>
        public long? StorageZoneId { get; set; }
        /// <summary>The Suspended property</summary>
        public bool? Suspended { get; private set; }
        /// <summary>The Type property</summary>
        public double? Type { get; set; }
        /// <summary>Determines if cache update is performed in the background.</summary>
        public bool? UseBackgroundUpdate { get; set; }
        /// <summary>The UserId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; private set; }
#nullable restore
#else
        public string UserId { get; private set; }
#endif
        /// <summary>Determines if we should use stale cache while the origin is offline</summary>
        public bool? UseStaleWhileOffline { get; set; }
        /// <summary>Determines if we should use stale cache while cache is updating</summary>
        public bool? UseStaleWhileUpdating { get; set; }
        /// <summary>Determines if the Pull Zone should verify the origin SSL certificate</summary>
        public bool? VerifyOriginSSL { get; set; }
        /// <summary>The ID of the video library that the zone is linked to</summary>
        public long? VideoLibraryId { get; private set; }
        /// <summary>True if the URL secure token authentication security is enabled</summary>
        public bool? ZoneSecurityEnabled { get; set; }
        /// <summary>True if the zone security hash should include the remote IP</summary>
        public bool? ZoneSecurityIncludeHashRemoteIP { get; set; }
        /// <summary>The security key used for secure URL token authentication</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ZoneSecurityKey { get; private set; }
#nullable restore
#else
        public string ZoneSecurityKey { get; private set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="BunnyApiClient.Models.PullZone.PullZone"/> and sets the default values.
        /// </summary>
        public PullZone()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="BunnyApiClient.Models.PullZone.PullZone"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::BunnyApiClient.Models.PullZone.PullZone CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::BunnyApiClient.Models.PullZone.PullZone();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "AWSSigningEnabled", n => { AWSSigningEnabled = n.GetBoolValue(); } },
                { "AWSSigningKey", n => { AWSSigningKey = n.GetStringValue(); } },
                { "AWSSigningRegionName", n => { AWSSigningRegionName = n.GetStringValue(); } },
                { "AWSSigningSecret", n => { AWSSigningSecret = n.GetStringValue(); } },
                { "AccessControlOriginHeaderExtensions", n => { AccessControlOriginHeaderExtensions = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "AddCanonicalHeader", n => { AddCanonicalHeader = n.GetBoolValue(); } },
                { "AddHostHeader", n => { AddHostHeader = n.GetBoolValue(); } },
                { "AfricaDiscount", n => { AfricaDiscount = n.GetIntValue(); } },
                { "AllowedReferrers", n => { AllowedReferrers = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "AsiaOceaniaDiscount", n => { AsiaOceaniaDiscount = n.GetIntValue(); } },
                { "BlockNoneReferrer", n => { BlockNoneReferrer = n.GetBoolValue(); } },
                { "BlockPostRequests", n => { BlockPostRequests = n.GetBoolValue(); } },
                { "BlockRootPathAccess", n => { BlockRootPathAccess = n.GetBoolValue(); } },
                { "BlockedCountries", n => { BlockedCountries = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "BlockedIps", n => { BlockedIps = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "BlockedReferrers", n => { BlockedReferrers = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "BudgetRedirectedCountries", n => { BudgetRedirectedCountries = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "BunnyAiImageBlueprints", n => { BunnyAiImageBlueprints = n.GetCollectionOfObjectValues<global::BunnyApiClient.Models.PullZone.BunnyAiImageBlueprint>(global::BunnyApiClient.Models.PullZone.BunnyAiImageBlueprint.CreateFromDiscriminatorValue)?.ToList(); } },
                { "BurstSize", n => { BurstSize = n.GetIntValue(); } },
                { "CacheControlMaxAgeOverride", n => { CacheControlMaxAgeOverride = n.GetLongValue(); } },
                { "CacheControlPublicMaxAgeOverride", n => { CacheControlPublicMaxAgeOverride = n.GetLongValue(); } },
                { "CacheErrorResponses", n => { CacheErrorResponses = n.GetBoolValue(); } },
                { "CacheVersion", n => { CacheVersion = n.GetDoubleValue(); } },
                { "CnameDomain", n => { CnameDomain = n.GetStringValue(); } },
                { "ConnectionLimitPerIPCount", n => { ConnectionLimitPerIPCount = n.GetIntValue(); } },
                { "CookieVaryParameters", n => { CookieVaryParameters = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "DisableCookies", n => { DisableCookies = n.GetBoolValue(); } },
                { "DisableLetsEncrypt", n => { DisableLetsEncrypt = n.GetBoolValue(); } },
                { "DnsRecordId", n => { DnsRecordId = n.GetLongValue(); } },
                { "DnsRecordValue", n => { DnsRecordValue = n.GetStringValue(); } },
                { "DnsZoneId", n => { DnsZoneId = n.GetLongValue(); } },
                { "EUUSDiscount", n => { EUUSDiscount = n.GetIntValue(); } },
                { "EdgeRules", n => { EdgeRules = n.GetCollectionOfObjectValues<global::BunnyApiClient.Models.PullZone.EdgeRule.EdgeRule>(global::BunnyApiClient.Models.PullZone.EdgeRule.EdgeRule.CreateFromDiscriminatorValue)?.ToList(); } },
                { "EdgeScriptExecutionPhase", n => { EdgeScriptExecutionPhase = n.GetDoubleValue(); } },
                { "EdgeScriptId", n => { EdgeScriptId = n.GetLongValue(); } },
                { "EnableAccessControlOriginHeader", n => { EnableAccessControlOriginHeader = n.GetBoolValue(); } },
                { "EnableAutoSSL", n => { EnableAutoSSL = n.GetBoolValue(); } },
                { "EnableAvifVary", n => { EnableAvifVary = n.GetBoolValue(); } },
                { "EnableBunnyImageAi", n => { EnableBunnyImageAi = n.GetBoolValue(); } },
                { "EnableCacheSlice", n => { EnableCacheSlice = n.GetBoolValue(); } },
                { "EnableCookieVary", n => { EnableCookieVary = n.GetBoolValue(); } },
                { "EnableCountryCodeVary", n => { EnableCountryCodeVary = n.GetBoolValue(); } },
                { "EnableGeoZoneAF", n => { EnableGeoZoneAF = n.GetBoolValue(); } },
                { "EnableGeoZoneASIA", n => { EnableGeoZoneASIA = n.GetBoolValue(); } },
                { "EnableGeoZoneEU", n => { EnableGeoZoneEU = n.GetBoolValue(); } },
                { "EnableGeoZoneSA", n => { EnableGeoZoneSA = n.GetBoolValue(); } },
                { "EnableGeoZoneUS", n => { EnableGeoZoneUS = n.GetBoolValue(); } },
                { "EnableHostnameVary", n => { EnableHostnameVary = n.GetBoolValue(); } },
                { "EnableLogging", n => { EnableLogging = n.GetBoolValue(); } },
                { "EnableMobileVary", n => { EnableMobileVary = n.GetBoolValue(); } },
                { "EnableOriginShield", n => { EnableOriginShield = n.GetBoolValue(); } },
                { "EnableQueryStringOrdering", n => { EnableQueryStringOrdering = n.GetBoolValue(); } },
                { "EnableRequestCoalescing", n => { EnableRequestCoalescing = n.GetBoolValue(); } },
                { "EnableSafeHop", n => { EnableSafeHop = n.GetBoolValue(); } },
                { "EnableSmartCache", n => { EnableSmartCache = n.GetBoolValue(); } },
                { "EnableTLS1", n => { EnableTLS1 = n.GetBoolValue(); } },
                { "EnableTLS1_1", n => { EnableTLS11 = n.GetBoolValue(); } },
                { "EnableWebPVary", n => { EnableWebPVary = n.GetBoolValue(); } },
                { "Enabled", n => { Enabled = n.GetBoolValue(); } },
                { "ErrorPageCustomCode", n => { ErrorPageCustomCode = n.GetStringValue(); } },
                { "ErrorPageEnableCustomCode", n => { ErrorPageEnableCustomCode = n.GetBoolValue(); } },
                { "ErrorPageEnableStatuspageWidget", n => { ErrorPageEnableStatuspageWidget = n.GetBoolValue(); } },
                { "ErrorPageStatuspageCode", n => { ErrorPageStatuspageCode = n.GetStringValue(); } },
                { "ErrorPageWhitelabel", n => { ErrorPageWhitelabel = n.GetBoolValue(); } },
                { "FollowRedirects", n => { FollowRedirects = n.GetBoolValue(); } },
                { "Hostnames", n => { Hostnames = n.GetCollectionOfObjectValues<global::BunnyApiClient.Models.PullZone.Hostname>(global::BunnyApiClient.Models.PullZone.Hostname.CreateFromDiscriminatorValue)?.ToList(); } },
                { "Id", n => { Id = n.GetLongValue(); } },
                { "IgnoreQueryStrings", n => { IgnoreQueryStrings = n.GetBoolValue(); } },
                { "LimitRateAfter", n => { LimitRateAfter = n.GetDoubleValue(); } },
                { "LimitRatePerSecond", n => { LimitRatePerSecond = n.GetDoubleValue(); } },
                { "LogAnonymizationType", n => { LogAnonymizationType = n.GetDoubleValue(); } },
                { "LogFormat", n => { LogFormat = n.GetDoubleValue(); } },
                { "LogForwardingEnabled", n => { LogForwardingEnabled = n.GetBoolValue(); } },
                { "LogForwardingFormat", n => { LogForwardingFormat = n.GetDoubleValue(); } },
                { "LogForwardingHostname", n => { LogForwardingHostname = n.GetStringValue(); } },
                { "LogForwardingPort", n => { LogForwardingPort = n.GetIntValue(); } },
                { "LogForwardingProtocol", n => { LogForwardingProtocol = n.GetDoubleValue(); } },
                { "LogForwardingToken", n => { LogForwardingToken = n.GetStringValue(); } },
                { "LoggingIPAnonymizationEnabled", n => { LoggingIPAnonymizationEnabled = n.GetBoolValue(); } },
                { "LoggingSaveToStorage", n => { LoggingSaveToStorage = n.GetBoolValue(); } },
                { "LoggingStorageZoneId", n => { LoggingStorageZoneId = n.GetLongValue(); } },
                { "MagicContainersAppId", n => { MagicContainersAppId = n.GetStringValue(); } },
                { "MagicContainersEndpointId", n => { MagicContainersEndpointId = n.GetLongValue(); } },
                { "MiddlewareScriptId", n => { MiddlewareScriptId = n.GetLongValue(); } },
                { "MonthlyBandwidthLimit", n => { MonthlyBandwidthLimit = n.GetLongValue(); } },
                { "MonthlyBandwidthUsed", n => { MonthlyBandwidthUsed = n.GetLongValue(); } },
                { "MonthlyCharges", n => { MonthlyCharges = n.GetDoubleValue(); } },
                { "Name", n => { Name = n.GetStringValue(); } },
                { "OptimizerAutomaticOptimizationEnabled", n => { OptimizerAutomaticOptimizationEnabled = n.GetBoolValue(); } },
                { "OptimizerClasses", n => { OptimizerClasses = n.GetCollectionOfObjectValues<global::BunnyApiClient.Models.PullZone.Optimizer.OptimizerClass>(global::BunnyApiClient.Models.PullZone.Optimizer.OptimizerClass.CreateFromDiscriminatorValue)?.ToList(); } },
                { "OptimizerDesktopMaxWidth", n => { OptimizerDesktopMaxWidth = n.GetIntValue(); } },
                { "OptimizerEnableManipulationEngine", n => { OptimizerEnableManipulationEngine = n.GetBoolValue(); } },
                { "OptimizerEnableWebP", n => { OptimizerEnableWebP = n.GetBoolValue(); } },
                { "OptimizerEnabled", n => { OptimizerEnabled = n.GetBoolValue(); } },
                { "OptimizerForceClasses", n => { OptimizerForceClasses = n.GetBoolValue(); } },
                { "OptimizerImageQuality", n => { OptimizerImageQuality = n.GetIntValue(); } },
                { "OptimizerMinifyCSS", n => { OptimizerMinifyCSS = n.GetBoolValue(); } },
                { "OptimizerMinifyJavaScript", n => { OptimizerMinifyJavaScript = n.GetBoolValue(); } },
                { "OptimizerMobileImageQuality", n => { OptimizerMobileImageQuality = n.GetIntValue(); } },
                { "OptimizerMobileMaxWidth", n => { OptimizerMobileMaxWidth = n.GetIntValue(); } },
                { "OptimizerStaticHtmlEnabled", n => { OptimizerStaticHtmlEnabled = n.GetBoolValue(); } },
                { "OptimizerStaticHtmlWordPressBypassCookie", n => { OptimizerStaticHtmlWordPressBypassCookie = n.GetStringValue(); } },
                { "OptimizerStaticHtmlWordPressPath", n => { OptimizerStaticHtmlWordPressPath = n.GetStringValue(); } },
                { "OptimizerWatermarkEnabled", n => { OptimizerWatermarkEnabled = n.GetBoolValue(); } },
                { "OptimizerWatermarkMinImageSize", n => { OptimizerWatermarkMinImageSize = n.GetIntValue(); } },
                { "OptimizerWatermarkOffset", n => { OptimizerWatermarkOffset = n.GetDoubleValue(); } },
                { "OptimizerWatermarkPosition", n => { OptimizerWatermarkPosition = n.GetDoubleValue(); } },
                { "OptimizerWatermarkUrl", n => { OptimizerWatermarkUrl = n.GetStringValue(); } },
                { "OriginConnectTimeout", n => { OriginConnectTimeout = n.GetIntValue(); } },
                { "OriginHostHeader", n => { OriginHostHeader = n.GetStringValue(); } },
                { "OriginLinkValue", n => { OriginLinkValue = n.GetStringValue(); } },
                { "OriginResponseTimeout", n => { OriginResponseTimeout = n.GetIntValue(); } },
                { "OriginRetries", n => { OriginRetries = n.GetIntValue(); } },
                { "OriginRetry5XXResponses", n => { OriginRetry5XXResponses = n.GetBoolValue(); } },
                { "OriginRetryConnectionTimeout", n => { OriginRetryConnectionTimeout = n.GetBoolValue(); } },
                { "OriginRetryDelay", n => { OriginRetryDelay = n.GetIntValue(); } },
                { "OriginRetryResponseTimeout", n => { OriginRetryResponseTimeout = n.GetBoolValue(); } },
                { "OriginShieldEnableConcurrencyLimit", n => { OriginShieldEnableConcurrencyLimit = n.GetBoolValue(); } },
                { "OriginShieldMaxConcurrentRequests", n => { OriginShieldMaxConcurrentRequests = n.GetIntValue(); } },
                { "OriginShieldMaxQueuedRequests", n => { OriginShieldMaxQueuedRequests = n.GetIntValue(); } },
                { "OriginShieldQueueMaxWaitTime", n => { OriginShieldQueueMaxWaitTime = n.GetIntValue(); } },
                { "OriginShieldZoneCode", n => { OriginShieldZoneCode = n.GetStringValue(); } },
                { "OriginType", n => { OriginType = n.GetDoubleValue(); } },
                { "OriginUrl", n => { OriginUrl = n.GetStringValue(); } },
                { "PermaCacheStorageZoneId", n => { PermaCacheStorageZoneId = n.GetLongValue(); } },
                { "PermaCacheType", n => { PermaCacheType = n.GetLongValue(); } },
                { "PreloadingScreenCode", n => { PreloadingScreenCode = n.GetStringValue(); } },
                { "PreloadingScreenCodeEnabled", n => { PreloadingScreenCodeEnabled = n.GetBoolValue(); } },
                { "PreloadingScreenDelay", n => { PreloadingScreenDelay = n.GetIntValue(); } },
                { "PreloadingScreenEnabled", n => { PreloadingScreenEnabled = n.GetBoolValue(); } },
                { "PreloadingScreenLogoUrl", n => { PreloadingScreenLogoUrl = n.GetStringValue(); } },
                { "PreloadingScreenShowOnFirstVisit", n => { PreloadingScreenShowOnFirstVisit = n.GetBoolValue(); } },
                { "PreloadingScreenTheme", n => { PreloadingScreenTheme = n.GetDoubleValue(); } },
                { "PriceOverride", n => { PriceOverride = n.GetDoubleValue(); } },
                { "QueryStringVaryParameters", n => { QueryStringVaryParameters = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "RequestCoalescingTimeout", n => { RequestCoalescingTimeout = n.GetIntValue(); } },
                { "RequestLimit", n => { RequestLimit = n.GetIntValue(); } },
                { "RoutingFilters", n => { RoutingFilters = n.GetCollectionOfEnumValues<global::BunnyApiClient.Models.PullZone.PullZone_RoutingFilters>()?.ToList(); } },
                { "ShieldDDosProtectionEnabled", n => { ShieldDDosProtectionEnabled = n.GetBoolValue(); } },
                { "ShieldDDosProtectionType", n => { ShieldDDosProtectionType = n.GetDoubleValue(); } },
                { "SouthAmericaDiscount", n => { SouthAmericaDiscount = n.GetIntValue(); } },
                { "StorageZoneId", n => { StorageZoneId = n.GetLongValue(); } },
                { "Suspended", n => { Suspended = n.GetBoolValue(); } },
                { "Type", n => { Type = n.GetDoubleValue(); } },
                { "UseBackgroundUpdate", n => { UseBackgroundUpdate = n.GetBoolValue(); } },
                { "UseStaleWhileOffline", n => { UseStaleWhileOffline = n.GetBoolValue(); } },
                { "UseStaleWhileUpdating", n => { UseStaleWhileUpdating = n.GetBoolValue(); } },
                { "UserId", n => { UserId = n.GetStringValue(); } },
                { "VerifyOriginSSL", n => { VerifyOriginSSL = n.GetBoolValue(); } },
                { "VideoLibraryId", n => { VideoLibraryId = n.GetLongValue(); } },
                { "ZoneSecurityEnabled", n => { ZoneSecurityEnabled = n.GetBoolValue(); } },
                { "ZoneSecurityIncludeHashRemoteIP", n => { ZoneSecurityIncludeHashRemoteIP = n.GetBoolValue(); } },
                { "ZoneSecurityKey", n => { ZoneSecurityKey = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("AccessControlOriginHeaderExtensions", AccessControlOriginHeaderExtensions);
            writer.WriteBoolValue("AddCanonicalHeader", AddCanonicalHeader);
            writer.WriteBoolValue("AddHostHeader", AddHostHeader);
            writer.WriteCollectionOfPrimitiveValues<string>("AllowedReferrers", AllowedReferrers);
            writer.WriteBoolValue("AWSSigningEnabled", AWSSigningEnabled);
            writer.WriteStringValue("AWSSigningKey", AWSSigningKey);
            writer.WriteStringValue("AWSSigningRegionName", AWSSigningRegionName);
            writer.WriteStringValue("AWSSigningSecret", AWSSigningSecret);
            writer.WriteCollectionOfPrimitiveValues<string>("BlockedCountries", BlockedCountries);
            writer.WriteCollectionOfPrimitiveValues<string>("BlockedIps", BlockedIps);
            writer.WriteCollectionOfPrimitiveValues<string>("BlockedReferrers", BlockedReferrers);
            writer.WriteBoolValue("BlockNoneReferrer", BlockNoneReferrer);
            writer.WriteBoolValue("BlockPostRequests", BlockPostRequests);
            writer.WriteBoolValue("BlockRootPathAccess", BlockRootPathAccess);
            writer.WriteCollectionOfPrimitiveValues<string>("BudgetRedirectedCountries", BudgetRedirectedCountries);
            writer.WriteCollectionOfObjectValues<global::BunnyApiClient.Models.PullZone.BunnyAiImageBlueprint>("BunnyAiImageBlueprints", BunnyAiImageBlueprints);
            writer.WriteIntValue("BurstSize", BurstSize);
            writer.WriteLongValue("CacheControlMaxAgeOverride", CacheControlMaxAgeOverride);
            writer.WriteLongValue("CacheControlPublicMaxAgeOverride", CacheControlPublicMaxAgeOverride);
            writer.WriteBoolValue("CacheErrorResponses", CacheErrorResponses);
            writer.WriteIntValue("ConnectionLimitPerIPCount", ConnectionLimitPerIPCount);
            writer.WriteCollectionOfPrimitiveValues<string>("CookieVaryParameters", CookieVaryParameters);
            writer.WriteBoolValue("DisableCookies", DisableCookies);
            writer.WriteBoolValue("DisableLetsEncrypt", DisableLetsEncrypt);
            writer.WriteCollectionOfObjectValues<global::BunnyApiClient.Models.PullZone.EdgeRule.EdgeRule>("EdgeRules", EdgeRules);
            writer.WriteDoubleValue("EdgeScriptExecutionPhase", EdgeScriptExecutionPhase);
            writer.WriteLongValue("EdgeScriptId", EdgeScriptId);
            writer.WriteBoolValue("EnableAccessControlOriginHeader", EnableAccessControlOriginHeader);
            writer.WriteBoolValue("EnableAutoSSL", EnableAutoSSL);
            writer.WriteBoolValue("EnableAvifVary", EnableAvifVary);
            writer.WriteBoolValue("EnableBunnyImageAi", EnableBunnyImageAi);
            writer.WriteBoolValue("EnableCacheSlice", EnableCacheSlice);
            writer.WriteBoolValue("EnableCookieVary", EnableCookieVary);
            writer.WriteBoolValue("EnableCountryCodeVary", EnableCountryCodeVary);
            writer.WriteBoolValue("EnableGeoZoneAF", EnableGeoZoneAF);
            writer.WriteBoolValue("EnableGeoZoneASIA", EnableGeoZoneASIA);
            writer.WriteBoolValue("EnableGeoZoneEU", EnableGeoZoneEU);
            writer.WriteBoolValue("EnableGeoZoneSA", EnableGeoZoneSA);
            writer.WriteBoolValue("EnableGeoZoneUS", EnableGeoZoneUS);
            writer.WriteBoolValue("EnableHostnameVary", EnableHostnameVary);
            writer.WriteBoolValue("EnableLogging", EnableLogging);
            writer.WriteBoolValue("EnableMobileVary", EnableMobileVary);
            writer.WriteBoolValue("EnableOriginShield", EnableOriginShield);
            writer.WriteBoolValue("EnableQueryStringOrdering", EnableQueryStringOrdering);
            writer.WriteBoolValue("EnableRequestCoalescing", EnableRequestCoalescing);
            writer.WriteBoolValue("EnableSafeHop", EnableSafeHop);
            writer.WriteBoolValue("EnableSmartCache", EnableSmartCache);
            writer.WriteBoolValue("EnableTLS1", EnableTLS1);
            writer.WriteBoolValue("EnableTLS1_1", EnableTLS11);
            writer.WriteBoolValue("EnableWebPVary", EnableWebPVary);
            writer.WriteStringValue("ErrorPageCustomCode", ErrorPageCustomCode);
            writer.WriteBoolValue("ErrorPageEnableCustomCode", ErrorPageEnableCustomCode);
            writer.WriteBoolValue("ErrorPageEnableStatuspageWidget", ErrorPageEnableStatuspageWidget);
            writer.WriteStringValue("ErrorPageStatuspageCode", ErrorPageStatuspageCode);
            writer.WriteBoolValue("ErrorPageWhitelabel", ErrorPageWhitelabel);
            writer.WriteBoolValue("FollowRedirects", FollowRedirects);
            writer.WriteBoolValue("IgnoreQueryStrings", IgnoreQueryStrings);
            writer.WriteDoubleValue("LimitRateAfter", LimitRateAfter);
            writer.WriteDoubleValue("LimitRatePerSecond", LimitRatePerSecond);
            writer.WriteDoubleValue("LogAnonymizationType", LogAnonymizationType);
            writer.WriteDoubleValue("LogFormat", LogFormat);
            writer.WriteBoolValue("LogForwardingEnabled", LogForwardingEnabled);
            writer.WriteDoubleValue("LogForwardingFormat", LogForwardingFormat);
            writer.WriteStringValue("LogForwardingHostname", LogForwardingHostname);
            writer.WriteIntValue("LogForwardingPort", LogForwardingPort);
            writer.WriteDoubleValue("LogForwardingProtocol", LogForwardingProtocol);
            writer.WriteStringValue("LogForwardingToken", LogForwardingToken);
            writer.WriteBoolValue("LoggingIPAnonymizationEnabled", LoggingIPAnonymizationEnabled);
            writer.WriteBoolValue("LoggingSaveToStorage", LoggingSaveToStorage);
            writer.WriteLongValue("LoggingStorageZoneId", LoggingStorageZoneId);
            writer.WriteStringValue("MagicContainersAppId", MagicContainersAppId);
            writer.WriteLongValue("MagicContainersEndpointId", MagicContainersEndpointId);
            writer.WriteLongValue("MiddlewareScriptId", MiddlewareScriptId);
            writer.WriteLongValue("MonthlyBandwidthLimit", MonthlyBandwidthLimit);
            writer.WriteDoubleValue("MonthlyCharges", MonthlyCharges);
            writer.WriteStringValue("Name", Name);
            writer.WriteBoolValue("OptimizerAutomaticOptimizationEnabled", OptimizerAutomaticOptimizationEnabled);
            writer.WriteCollectionOfObjectValues<global::BunnyApiClient.Models.PullZone.Optimizer.OptimizerClass>("OptimizerClasses", OptimizerClasses);
            writer.WriteIntValue("OptimizerDesktopMaxWidth", OptimizerDesktopMaxWidth);
            writer.WriteBoolValue("OptimizerEnabled", OptimizerEnabled);
            writer.WriteBoolValue("OptimizerEnableManipulationEngine", OptimizerEnableManipulationEngine);
            writer.WriteBoolValue("OptimizerEnableWebP", OptimizerEnableWebP);
            writer.WriteBoolValue("OptimizerForceClasses", OptimizerForceClasses);
            writer.WriteIntValue("OptimizerImageQuality", OptimizerImageQuality);
            writer.WriteBoolValue("OptimizerMinifyCSS", OptimizerMinifyCSS);
            writer.WriteBoolValue("OptimizerMinifyJavaScript", OptimizerMinifyJavaScript);
            writer.WriteIntValue("OptimizerMobileImageQuality", OptimizerMobileImageQuality);
            writer.WriteIntValue("OptimizerMobileMaxWidth", OptimizerMobileMaxWidth);
            writer.WriteBoolValue("OptimizerStaticHtmlEnabled", OptimizerStaticHtmlEnabled);
            writer.WriteStringValue("OptimizerStaticHtmlWordPressBypassCookie", OptimizerStaticHtmlWordPressBypassCookie);
            writer.WriteStringValue("OptimizerStaticHtmlWordPressPath", OptimizerStaticHtmlWordPressPath);
            writer.WriteBoolValue("OptimizerWatermarkEnabled", OptimizerWatermarkEnabled);
            writer.WriteIntValue("OptimizerWatermarkMinImageSize", OptimizerWatermarkMinImageSize);
            writer.WriteDoubleValue("OptimizerWatermarkOffset", OptimizerWatermarkOffset);
            writer.WriteDoubleValue("OptimizerWatermarkPosition", OptimizerWatermarkPosition);
            writer.WriteStringValue("OptimizerWatermarkUrl", OptimizerWatermarkUrl);
            writer.WriteIntValue("OriginConnectTimeout", OriginConnectTimeout);
            writer.WriteStringValue("OriginHostHeader", OriginHostHeader);
            writer.WriteIntValue("OriginResponseTimeout", OriginResponseTimeout);
            writer.WriteIntValue("OriginRetries", OriginRetries);
            writer.WriteBoolValue("OriginRetry5XXResponses", OriginRetry5XXResponses);
            writer.WriteBoolValue("OriginRetryConnectionTimeout", OriginRetryConnectionTimeout);
            writer.WriteIntValue("OriginRetryDelay", OriginRetryDelay);
            writer.WriteBoolValue("OriginRetryResponseTimeout", OriginRetryResponseTimeout);
            writer.WriteBoolValue("OriginShieldEnableConcurrencyLimit", OriginShieldEnableConcurrencyLimit);
            writer.WriteIntValue("OriginShieldMaxConcurrentRequests", OriginShieldMaxConcurrentRequests);
            writer.WriteIntValue("OriginShieldMaxQueuedRequests", OriginShieldMaxQueuedRequests);
            writer.WriteIntValue("OriginShieldQueueMaxWaitTime", OriginShieldQueueMaxWaitTime);
            writer.WriteStringValue("OriginShieldZoneCode", OriginShieldZoneCode);
            writer.WriteDoubleValue("OriginType", OriginType);
            writer.WriteStringValue("OriginUrl", OriginUrl);
            writer.WriteLongValue("PermaCacheStorageZoneId", PermaCacheStorageZoneId);
            writer.WriteLongValue("PermaCacheType", PermaCacheType);
            writer.WriteStringValue("PreloadingScreenCode", PreloadingScreenCode);
            writer.WriteBoolValue("PreloadingScreenCodeEnabled", PreloadingScreenCodeEnabled);
            writer.WriteIntValue("PreloadingScreenDelay", PreloadingScreenDelay);
            writer.WriteBoolValue("PreloadingScreenEnabled", PreloadingScreenEnabled);
            writer.WriteStringValue("PreloadingScreenLogoUrl", PreloadingScreenLogoUrl);
            writer.WriteBoolValue("PreloadingScreenShowOnFirstVisit", PreloadingScreenShowOnFirstVisit);
            writer.WriteDoubleValue("PreloadingScreenTheme", PreloadingScreenTheme);
            writer.WriteCollectionOfPrimitiveValues<string>("QueryStringVaryParameters", QueryStringVaryParameters);
            writer.WriteIntValue("RequestCoalescingTimeout", RequestCoalescingTimeout);
            writer.WriteIntValue("RequestLimit", RequestLimit);
            writer.WriteCollectionOfEnumValues<global::BunnyApiClient.Models.PullZone.PullZone_RoutingFilters>("RoutingFilters", RoutingFilters);
            writer.WriteBoolValue("ShieldDDosProtectionEnabled", ShieldDDosProtectionEnabled);
            writer.WriteDoubleValue("ShieldDDosProtectionType", ShieldDDosProtectionType);
            writer.WriteLongValue("StorageZoneId", StorageZoneId);
            writer.WriteDoubleValue("Type", Type);
            writer.WriteBoolValue("UseBackgroundUpdate", UseBackgroundUpdate);
            writer.WriteBoolValue("UseStaleWhileOffline", UseStaleWhileOffline);
            writer.WriteBoolValue("UseStaleWhileUpdating", UseStaleWhileUpdating);
            writer.WriteBoolValue("VerifyOriginSSL", VerifyOriginSSL);
            writer.WriteBoolValue("ZoneSecurityEnabled", ZoneSecurityEnabled);
            writer.WriteBoolValue("ZoneSecurityIncludeHashRemoteIP", ZoneSecurityIncludeHashRemoteIP);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
