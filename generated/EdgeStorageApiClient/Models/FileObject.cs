// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace EdgeStorageApiClient.Models
{
    #pragma warning disable CS1591
    public class FileObject : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The ArrayNumber property</summary>
        public long? ArrayNumber { get; set; }
        /// <summary>The Checksum property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Checksum { get; set; }
#nullable restore
#else
        public string Checksum { get; set; }
#endif
        /// <summary>The ContentType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContentType { get; set; }
#nullable restore
#else
        public string ContentType { get; set; }
#endif
        /// <summary>The DateCreated property</summary>
        public DateTimeOffset? DateCreated { get; set; }
        /// <summary>The Guid property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Guid { get; set; }
#nullable restore
#else
        public string Guid { get; set; }
#endif
        /// <summary>The IsDirectory property</summary>
        public bool? IsDirectory { get; set; }
        /// <summary>The LastChanged property</summary>
        public DateTimeOffset? LastChanged { get; set; }
        /// <summary>The Length property</summary>
        public long? Length { get; set; }
        /// <summary>The ObjectName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ObjectName { get; set; }
#nullable restore
#else
        public string ObjectName { get; set; }
#endif
        /// <summary>The Path property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Path { get; set; }
#nullable restore
#else
        public string Path { get; set; }
#endif
        /// <summary>The ReplicatedZones property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReplicatedZones { get; set; }
#nullable restore
#else
        public string ReplicatedZones { get; set; }
#endif
        /// <summary>The ServerId property</summary>
        public long? ServerId { get; set; }
        /// <summary>The StorageZoneId property</summary>
        public long? StorageZoneId { get; set; }
        /// <summary>The StorageZoneName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StorageZoneName { get; set; }
#nullable restore
#else
        public string StorageZoneName { get; set; }
#endif
        /// <summary>The UserId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="EdgeStorageApiClient.Models.FileObject"/> and sets the default values.
        /// </summary>
        public FileObject()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="EdgeStorageApiClient.Models.FileObject"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::EdgeStorageApiClient.Models.FileObject CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::EdgeStorageApiClient.Models.FileObject();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ArrayNumber", n => { ArrayNumber = n.GetLongValue(); } },
                { "Checksum", n => { Checksum = n.GetStringValue(); } },
                { "ContentType", n => { ContentType = n.GetStringValue(); } },
                { "DateCreated", n => { DateCreated = n.GetDateTimeOffsetValue(); } },
                { "Guid", n => { Guid = n.GetStringValue(); } },
                { "IsDirectory", n => { IsDirectory = n.GetBoolValue(); } },
                { "LastChanged", n => { LastChanged = n.GetDateTimeOffsetValue(); } },
                { "Length", n => { Length = n.GetLongValue(); } },
                { "ObjectName", n => { ObjectName = n.GetStringValue(); } },
                { "Path", n => { Path = n.GetStringValue(); } },
                { "ReplicatedZones", n => { ReplicatedZones = n.GetStringValue(); } },
                { "ServerId", n => { ServerId = n.GetLongValue(); } },
                { "StorageZoneId", n => { StorageZoneId = n.GetLongValue(); } },
                { "StorageZoneName", n => { StorageZoneName = n.GetStringValue(); } },
                { "UserId", n => { UserId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteLongValue("ArrayNumber", ArrayNumber);
            writer.WriteStringValue("Checksum", Checksum);
            writer.WriteStringValue("ContentType", ContentType);
            writer.WriteDateTimeOffsetValue("DateCreated", DateCreated);
            writer.WriteStringValue("Guid", Guid);
            writer.WriteBoolValue("IsDirectory", IsDirectory);
            writer.WriteDateTimeOffsetValue("LastChanged", LastChanged);
            writer.WriteLongValue("Length", Length);
            writer.WriteStringValue("ObjectName", ObjectName);
            writer.WriteStringValue("Path", Path);
            writer.WriteStringValue("ReplicatedZones", ReplicatedZones);
            writer.WriteLongValue("ServerId", ServerId);
            writer.WriteLongValue("StorageZoneId", StorageZoneId);
            writer.WriteStringValue("StorageZoneName", StorageZoneName);
            writer.WriteStringValue("UserId", UserId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
