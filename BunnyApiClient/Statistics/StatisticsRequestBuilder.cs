// <auto-generated/>
#pragma warning disable CS0618
using BunnyApiClient.Models.Statistics.GetStatistics;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Cli.Commons.Extensions;
using Microsoft.Kiota.Cli.Commons.IO;
using Microsoft.Kiota.Cli.Commons;
using System.Collections.Generic;
using System.CommandLine;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace BunnyApiClient.Statistics
{
    /// <summary>
    /// Builds and executes requests for operations under \statistics
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    public partial class StatisticsRequestBuilder : BaseCliRequestBuilder
    {
        /// <summary>
        /// [GetStatistics API Docs](https://docs.bunny.net/reference/statisticspublic_index)
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetCommand()
        {
            var command = new Command("get");
            command.Description = "[GetStatistics API Docs](https://docs.bunny.net/reference/statisticspublic_index)";
            var dateFromOption = new Option<DateTimeOffset?>("--date-from") {
            };
            dateFromOption.IsRequired = false;
            command.AddOption(dateFromOption);
            var dateToOption = new Option<DateTimeOffset?>("--date-to") {
            };
            dateToOption.IsRequired = false;
            command.AddOption(dateToOption);
            var pullZoneOption = new Option<long?>("--pull-zone") {
            };
            pullZoneOption.IsRequired = false;
            command.AddOption(pullZoneOption);
            var serverZoneIdOption = new Option<long?>("--server-zone-id") {
            };
            serverZoneIdOption.IsRequired = false;
            command.AddOption(serverZoneIdOption);
            var loadErrorsOption = new Option<bool?>("--load-errors") {
            };
            loadErrorsOption.IsRequired = false;
            command.AddOption(loadErrorsOption);
            var hourlyOption = new Option<bool?>("--hourly") {
            };
            hourlyOption.IsRequired = false;
            command.AddOption(hourlyOption);
            var outputOption = new Option<FormatterType>("--output", () => FormatterType.JSON);
            command.AddOption(outputOption);
            var queryOption = new Option<string>("--query");
            command.AddOption(queryOption);
            command.SetHandler(async (invocationContext) => {
                var dateFrom = invocationContext.ParseResult.GetValueForOption(dateFromOption);
                var dateTo = invocationContext.ParseResult.GetValueForOption(dateToOption);
                var pullZone = invocationContext.ParseResult.GetValueForOption(pullZoneOption);
                var serverZoneId = invocationContext.ParseResult.GetValueForOption(serverZoneIdOption);
                var loadErrors = invocationContext.ParseResult.GetValueForOption(loadErrorsOption);
                var hourly = invocationContext.ParseResult.GetValueForOption(hourlyOption);
                var output = invocationContext.ParseResult.GetValueForOption(outputOption);
                var query = invocationContext.ParseResult.GetValueForOption(queryOption);
                IOutputFilter outputFilter = invocationContext.BindingContext.GetService(typeof(IOutputFilter)) as IOutputFilter ?? throw new ArgumentNullException("outputFilter");
                IOutputFormatterFactory outputFormatterFactory = invocationContext.BindingContext.GetService(typeof(IOutputFormatterFactory)) as IOutputFormatterFactory ?? throw new ArgumentNullException("outputFormatterFactory");
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToGetRequestInformation(q => {
                    q.QueryParameters.DateFrom = dateFrom;
                    q.QueryParameters.DateTo = dateTo;
                    q.QueryParameters.PullZone = pullZone;
                    q.QueryParameters.ServerZoneId = serverZoneId;
                    q.QueryParameters.LoadErrors = loadErrors;
                    q.QueryParameters.Hourly = hourly;
                });
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: default, cancellationToken: cancellationToken) ?? Stream.Null;
                response = (response != Stream.Null) ? await outputFilter.FilterOutputAsync(response, query, cancellationToken) : response;
                var formatter = outputFormatterFactory.GetFormatter(output);
                await formatter.WriteOutputAsync(response, cancellationToken);
            });
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BunnyApiClient.Statistics.StatisticsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        public StatisticsRequestBuilder(Dictionary<string, object> pathParameters) : base("{+baseurl}/statistics{?dateFrom,dateTo,hourly,loadErrors,pullZone,serverZoneId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BunnyApiClient.Statistics.StatisticsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public StatisticsRequestBuilder(string rawUrl) : base("{+baseurl}/statistics{?dateFrom,dateTo,hourly,loadErrors,pullZone,serverZoneId}", rawUrl)
        {
        }
        /// <summary>
        /// [GetStatistics API Docs](https://docs.bunny.net/reference/statisticspublic_index)
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::BunnyApiClient.Statistics.StatisticsRequestBuilder.StatisticsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::BunnyApiClient.Statistics.StatisticsRequestBuilder.StatisticsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// [GetStatistics API Docs](https://docs.bunny.net/reference/statisticspublic_index)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
        public partial class StatisticsRequestBuilderGetQueryParameters 
        {
            [QueryParameter("dateFrom")]
            public DateTimeOffset? DateFrom { get; set; }
            [QueryParameter("dateTo")]
            public DateTimeOffset? DateTo { get; set; }
            [QueryParameter("hourly")]
            public bool? Hourly { get; set; }
            [QueryParameter("loadErrors")]
            public bool? LoadErrors { get; set; }
            [QueryParameter("pullZone")]
            public long? PullZone { get; set; }
            [QueryParameter("serverZoneId")]
            public long? ServerZoneId { get; set; }
        }
    }
}
#pragma warning restore CS0618
